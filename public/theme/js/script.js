/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
/******/ (() => { // webpackBootstrap
/******/ 	var __webpack_modules__ = ({

/***/ "./resources/js/script.js":
/*!********************************!*\
  !*** ./resources/js/script.js ***!
  \********************************/
/***/ (() => {

eval("function _createForOfIteratorHelper(o, allowArrayLike) { var it = typeof Symbol !== \"undefined\" && o[Symbol.iterator] || o[\"@@iterator\"]; if (!it) { if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === \"number\") { if (it) o = it; var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e) { throw _e; }, f: F }; } throw new TypeError(\"Invalid attempt to iterate non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); } var normalCompletion = true, didErr = false, err; return { s: function s() { it = it.call(o); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e2) { didErr = true; err = _e2; }, f: function f() { try { if (!normalCompletion && it[\"return\"] != null) it[\"return\"](); } finally { if (didErr) throw err; } } }; }\n\nfunction _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === \"string\") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === \"Object\" && o.constructor) n = o.constructor.name; if (n === \"Map\" || n === \"Set\") return Array.from(o); if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }\n\nfunction _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }\n\ndocument.addEventListener('DOMContentLoaded', function () {\n  cutMenuOnClick();\n\n  function cutMenuOnClick() {\n    var hamburger = document.getElementsByClassName('header__hamburger')[0];\n    var menu = document.getElementById('header-drop');\n    document.addEventListener('click', function (evt) {\n      if (!menu.classList.contains('active')) return;\n      var menuBottom = menu.getBoundingClientRect().bottom;\n\n      if (evt.clientY > menuBottom) {\n        menu.style.height = 0;\n        menu.classList.remove('active');\n        hamburger.classList.remove('active');\n      }\n    });\n  }\n\n  expandElements();\n\n  function expandElements() {\n    var togglers = document.getElementsByClassName('expand-toggler');\n\n    var _iterator = _createForOfIteratorHelper(togglers),\n        _step;\n\n    try {\n      for (_iterator.s(); !(_step = _iterator.n()).done;) {\n        var toggler = _step.value;\n        toggler.addEventListener('click', toggle);\n      }\n    } catch (err) {\n      _iterator.e(err);\n    } finally {\n      _iterator.f();\n    }\n\n    function toggle(evt) {\n      var target = document.getElementById(this.dataset.expand);\n      if (!target) return;\n\n      if (this.classList.contains('active')) {\n        this.classList.remove('active');\n\n        if (target.classList.contains('active')) {\n          target.classList.remove('active');\n          cut(target);\n        }\n      } else {\n        this.classList.add('active');\n\n        if (!target.classList.contains('active')) {\n          target.classList.add('active');\n          expand(target);\n        }\n      }\n    }\n\n    function cut(target) {\n      target.style.height = 0;\n    }\n\n    function expand(target) {\n      var height = target.scrollHeight;\n      target.style.height = height + 'px';\n    }\n  }\n\n  prettySlider();\n\n  function prettySlider() {\n    var sliders = document.getElementsByClassName('pretty-slider');\n\n    var _iterator2 = _createForOfIteratorHelper(sliders),\n        _step2;\n\n    try {\n      for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {\n        var slider = _step2.value;\n        init(slider);\n      }\n    } catch (err) {\n      _iterator2.e(err);\n    } finally {\n      _iterator2.f();\n    }\n\n    function init(slider) {\n      var togglers = slider.querySelectorAll('.pretty-slider__navigation .-arrow');\n      var conveyor = slider.getElementsByClassName('pretty-slider__visible-slides-wrapper')[0];\n      var slides = slider.querySelectorAll('.pretty-slider__hidden-slides .pretty-slider__slide');\n      var dotsWrapper = slider.getElementsByClassName('pretty-slider__dots')[0];\n      var dots = dotsWrapper.getElementsByClassName('-dot');\n      var visibleSlides = conveyor.getElementsByClassName('pretty-slider__slide');\n      var sliderEngine = slider.getElementsByClassName('pretty-slider__wrapper')[0];\n      if (!conveyor) return;\n      var changeAllow = true;\n      var currentIndex = 0;\n\n      var _loop = function _loop(i) {\n        togglers[i].addEventListener('click', function () {\n          if (!changeAllow) return;\n          if (i == 0) slideBack();\n          if (i == 1) slideNext();\n        });\n      };\n\n      for (var i = 0; i < togglers.length; i++) {\n        _loop(i);\n      }\n\n      var sliderTimer = setTimeout(autoslide, 3000);\n\n      function autoslide() {\n        slideNext();\n        sliderTimer = setTimeout(autoslide, 3000);\n      }\n\n      if (sliderEngine) {\n        sliderEngine.addEventListener('mouseenter', function () {\n          clearTimeout(sliderTimer);\n        });\n        sliderEngine.addEventListener('mouseleave', function () {\n          sliderTimer = setTimeout(autoslide, 3000);\n        });\n      }\n\n      loadStart();\n\n      function loadStart() {\n        for (var _i = -1; _i < 2; _i++) {\n          var slide = slides[filterIndex(_i)].cloneNode(true);\n          conveyor.insertAdjacentElement('beforeend', slide);\n        }\n      }\n\n      createDots();\n\n      function createDots() {\n        if (!dotsWrapper) return;\n\n        for (var _i2 = 0; _i2 < slides.length; _i2++) {\n          var dot = document.createElement('div');\n          dot.classList.add('-dot');\n          dotsWrapper.append(dot);\n        }\n      }\n\n      changeDot();\n\n      function changeDot() {\n        var _iterator3 = _createForOfIteratorHelper(dots),\n            _step3;\n\n        try {\n          for (_iterator3.s(); !(_step3 = _iterator3.n()).done;) {\n            var dot = _step3.value;\n            dot.classList.remove('active');\n          }\n        } catch (err) {\n          _iterator3.e(err);\n        } finally {\n          _iterator3.f();\n        }\n\n        var targetDot = dots[currentIndex];\n        if (targetDot) targetDot.classList.add('active');\n      }\n\n      function filterIndex(i) {\n        if (i < 0) return slides.length - 1;\n        if (i >= slides.length) return 0;\n        return i;\n      }\n\n      function slideBack() {\n        // Включаем анимацию и перелистываем\n        currentIndex = filterIndex(currentIndex - 1);\n        changeAllow = false;\n        conveyor.classList.remove('--no-animate');\n        conveyor.style.left = '0';\n        changeDot();\n        conveyor.addEventListener('transitionend', function changeSlide() {\n          // Выключаем анимацию\n          conveyor.classList.add('--no-animate'); // Удаляем ненужный слайд\n\n          visibleSlides[visibleSlides.length - 1].remove(); // Копируем и вставляем дополнительный слайд\n\n          var slide = slides[filterIndex(currentIndex - 1)].cloneNode(true);\n          conveyor.insertAdjacentElement('afterbegin', slide);\n          conveyor.style.left = '-100%';\n          changeAllow = true;\n          conveyor.removeEventListener('transitionend', changeSlide);\n        });\n      }\n\n      function slideNext() {\n        // Включаем анимацию и перелистываем\n        currentIndex = filterIndex(currentIndex + 1);\n        changeAllow = false;\n        conveyor.classList.remove('--no-animate');\n        conveyor.style.left = '-200%';\n        changeDot();\n        conveyor.addEventListener('transitionend', function changeSlide() {\n          // Выключаем анимацию\n          conveyor.classList.add('--no-animate'); // Удаляем ненужный слайд\n\n          visibleSlides[0].remove(); // Копируем и вставляем дополнительный слайд\n\n          var slide = slides[filterIndex(currentIndex + 1)].cloneNode(true);\n          conveyor.insertAdjacentElement('beforeend', slide);\n          conveyor.style.left = '-100%';\n          changeAllow = true;\n          conveyor.removeEventListener('transitionend', changeSlide);\n        });\n      }\n    }\n  }\n\n  toggleActive();\n\n  function toggleActive() {\n    var togglers = document.getElementsByClassName('toggle-active');\n\n    var _iterator4 = _createForOfIteratorHelper(togglers),\n        _step4;\n\n    try {\n      for (_iterator4.s(); !(_step4 = _iterator4.n()).done;) {\n        var toggler = _step4.value;\n        toggler.addEventListener('click', toggle);\n      }\n    } catch (err) {\n      _iterator4.e(err);\n    } finally {\n      _iterator4.f();\n    }\n\n    function toggle() {\n      var id = this.dataset.toggleActive;\n      var element = document.getElementById(id);\n\n      if (element) {\n        element.classList.toggle('active');\n        this.classList.toggle('active');\n      } else {\n        console.error(\"Element by id \\\"\".concat(id, \"\\\" not found!\"));\n      }\n    }\n  }\n\n  tabs();\n\n  function tabs() {\n    var tabs = document.getElementsByClassName('tabs-system');\n\n    var _iterator5 = _createForOfIteratorHelper(tabs),\n        _step5;\n\n    try {\n      for (_iterator5.s(); !(_step5 = _iterator5.n()).done;) {\n        var tab = _step5.value;\n        init(tab);\n      }\n    } catch (err) {\n      _iterator5.e(err);\n    } finally {\n      _iterator5.f();\n    }\n\n    function init(tab) {\n      var triggers = tab.getElementsByClassName('tabs-system__trigger');\n      var tabs = tab.getElementsByClassName('tabs-system__tab');\n\n      var _loop2 = function _loop2(i) {\n        triggers[i].addEventListener('click', function () {\n          if (tabs[i]) {\n            deactivate();\n            tabs[i].classList.add('active');\n            triggers[i].classList.add('active');\n          }\n        });\n      };\n\n      for (var i = 0; i < triggers.length; i++) {\n        _loop2(i);\n      }\n\n      function deactivate() {\n        var _iterator6 = _createForOfIteratorHelper(tabs),\n            _step6;\n\n        try {\n          for (_iterator6.s(); !(_step6 = _iterator6.n()).done;) {\n            var _tab = _step6.value;\n\n            _tab.classList.remove('active');\n          }\n        } catch (err) {\n          _iterator6.e(err);\n        } finally {\n          _iterator6.f();\n        }\n\n        var _iterator7 = _createForOfIteratorHelper(triggers),\n            _step7;\n\n        try {\n          for (_iterator7.s(); !(_step7 = _iterator7.n()).done;) {\n            var trigger = _step7.value;\n            trigger.classList.remove('active');\n          }\n        } catch (err) {\n          _iterator7.e(err);\n        } finally {\n          _iterator7.f();\n        }\n      }\n    }\n  }\n\n  modals();\n\n  function modals() {\n    var modals = document.getElementsByClassName('modal');\n    var header = document.getElementById('header');\n    var openers = document.getElementsByClassName('open-modal');\n    var closers = document.getElementsByClassName('close-modal');\n    Object.values(openers).forEach(function (opener) {\n      opener.addEventListener('click', function () {\n        openWind(opener.dataset.openModal);\n      });\n    });\n    Object.values(closers).forEach(function (closer) {\n      closer.addEventListener('click', function () {\n        closeWind();\n      });\n    });\n\n    function openWind(id) {\n      var modal = document.getElementById(id);\n\n      if (!modal) {\n        console.warn('Модального окна с id \"' + id + '\" не существует');\n        return;\n      }\n\n      document.body.style.paddingRight = window.innerWidth - document.documentElement.clientWidth + 'px';\n      header.style.paddingRight = window.innerWidth - document.documentElement.clientWidth + 'px';\n      document.body.classList.add('--fixed');\n      var modalBody = modal.getElementsByClassName('modal__body')[0];\n      modal.classList.add('active');\n      modal.classList.add('--transparent');\n      modalBody.classList.add('active');\n      modalBody.classList.add('--transparent');\n      setTimeout(function () {\n        modal.classList.remove('--transparent');\n        modalBody.classList.remove('--transparent');\n      });\n    }\n\n    function closeWind() {\n      Object.values(modals).forEach(function (modal) {\n        var modalBody = modal.getElementsByClassName('modal__body')[0];\n        modal.classList.add('--transparent');\n        modalBody.classList.add('--transparent');\n        setTimeout(function () {\n          modal.classList.remove('active');\n          modal.classList.remove('--transparent');\n          modalBody.classList.remove('active');\n          modalBody.classList.remove('--transparent');\n        }, 300);\n      });\n      setTimeout(function () {\n        document.body.style.paddingRight = 0;\n        header.style.paddingRight = 0;\n        document.body.classList.remove('--fixed');\n      }, 300);\n    }\n  }\n\n  formDroplists();\n\n  function formDroplists() {\n    var droplists = document.getElementsByClassName('input-droplist');\n\n    var _iterator8 = _createForOfIteratorHelper(droplists),\n        _step8;\n\n    try {\n      for (_iterator8.s(); !(_step8 = _iterator8.n()).done;) {\n        var droplist = _step8.value;\n        init(droplist);\n      }\n    } catch (err) {\n      _iterator8.e(err);\n    } finally {\n      _iterator8.f();\n    }\n\n    function init(droplist) {\n      var input = droplist.getElementsByClassName('-input')[0];\n      var list = droplist.getElementsByClassName('-list')[0];\n      var listItems = droplist.getElementsByTagName('li');\n      if (!input || !list) return;\n      input.addEventListener('focus', function (evt) {\n        list.classList.add('active');\n      });\n      input.addEventListener('blur', function (evt) {\n        setTimeout(function () {\n          list.classList.remove('active');\n        }, 100);\n      });\n\n      var _iterator9 = _createForOfIteratorHelper(listItems),\n          _step9;\n\n      try {\n        for (_iterator9.s(); !(_step9 = _iterator9.n()).done;) {\n          var li = _step9.value;\n          li.addEventListener('mousedown', set);\n        }\n      } catch (err) {\n        _iterator9.e(err);\n      } finally {\n        _iterator9.f();\n      }\n\n      function set(evt) {\n        if (input.tagName == 'INPUT') input.value = this.dataset.value;\n\n        if (input.tagName == 'DIV') {\n          input.innerHTML = this.innerHTML;\n          input.dataset.value = this.dataset.value;\n        }\n      }\n    }\n  }\n\n  nextsForm();\n\n  function nextsForm() {\n    var forms = document.getElementsByClassName('nexts-form');\n    Object.values(forms).forEach(init);\n\n    function init(form) {\n      var input = form.getElementsByClassName('nexts-form__input')[0];\n\n      if (!input) {\n        console.warn('Не обнаружен \"input.nexts-form__input\"!');\n        return;\n      }\n\n      var nextsWrapper = form.getElementsByClassName('nexts-form__cells')[0];\n      var nexts = nextsWrapper.getElementsByTagName('input');\n      Object.values(nexts).forEach(function (input, i) {\n        input.value = '';\n        input.addEventListener('input', function (evt) {\n          input.value = input.value.replace(/[^\\d]/g, '');\n\n          if (input.value.length > 0) {\n            if (i < nexts.length - 1) {\n              nexts[i + 1].focus();\n              input.value = input.value[input.value.length - 1];\n            } else {\n              input.value = input.value[input.value.length - 1];\n              finish();\n            }\n          }\n        });\n      });\n\n      function finish() {\n        input.value = '';\n        Object.values(nexts).forEach(function (next) {\n          input.value += next.value;\n        });\n\n        if (input.value.length === 4) {\n          setTimeout(function () {\n            nextsWrapper.classList.add('--done');\n          }, 200);\n          form.submit();\n        } else {\n          nextsWrapper.classList.add('--error');\n          input.classList.add('--error');\n        }\n      }\n    }\n  }\n\n  $(\"#datepicker\").datepicker({\n    firstDay: 1,\n    dateFormat: \"dd.mm.yy\",\n    dayNames: [\"Воскресенье\", \"Понедельник\", \"Вторник\", \"Среда\", \"Четверг\", \"Пятница\", \"Суббота\"],\n    dayNamesShort: [\"Вск\", \"Пнд\", \"Втр\", \"Срд\", \"Чтв\", \"Птн\", \"Сбт\"],\n    dayNamesMin: [\"Вс\", \"Пн\", \"Вт\", \"Ср\", \"Чт\", \"Пт\", \"Сб\"],\n    monthNames: [\"Январь\", \"Февраль\", \"Март\", \"Апрель\", \"Май\", \"Июнь\", \"Июль\", \"Август\", \"Сентябрь\", \"Окрябрь\", \"Ноябрь\", \"Декабрь\"],\n    monthNamesShort: [\"Янв\", \"Фев\", \"Мар\", \"Апр\", \"Май\", \"Июн\", \"Июл\", \"Авг\", \"Сен\", \"Окр\", \"Ноя\", \"Дек\"],\n    showOtherMonths: true,\n    selectOtherMonths: true\n  });\n  $('.clients-logos').owlCarousel({\n    loop: false,\n    margin: 20,\n    nav: false,\n    dots: false,\n    responsive: {\n      0: {\n        items: 1\n      },\n      480: {\n        items: 2\n      },\n      770: {\n        items: 3\n      },\n      1200: {\n        items: 4\n      }\n    }\n  });\n  $('.reviews-slider').owlCarousel({\n    loop: false,\n    margin: 25,\n    nav: false,\n    dots: true,\n    responsive: {\n      0: {\n        items: 1\n      },\n      770: {\n        items: 2\n      }\n    }\n  });\n  $('.input-phone').mask(\"+7 (999) 999 9999\");\n});//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9yZXNvdXJjZXMvanMvc2NyaXB0LmpzPzg3MzMiXSwibmFtZXMiOlsiZG9jdW1lbnQiLCJhZGRFdmVudExpc3RlbmVyIiwiY3V0TWVudU9uQ2xpY2siLCJoYW1idXJnZXIiLCJnZXRFbGVtZW50c0J5Q2xhc3NOYW1lIiwibWVudSIsImdldEVsZW1lbnRCeUlkIiwiZXZ0IiwiY2xhc3NMaXN0IiwiY29udGFpbnMiLCJtZW51Qm90dG9tIiwiZ2V0Qm91bmRpbmdDbGllbnRSZWN0IiwiYm90dG9tIiwiY2xpZW50WSIsInN0eWxlIiwiaGVpZ2h0IiwicmVtb3ZlIiwiZXhwYW5kRWxlbWVudHMiLCJ0b2dnbGVycyIsInRvZ2dsZXIiLCJ0b2dnbGUiLCJ0YXJnZXQiLCJkYXRhc2V0IiwiZXhwYW5kIiwiY3V0IiwiYWRkIiwic2Nyb2xsSGVpZ2h0IiwicHJldHR5U2xpZGVyIiwic2xpZGVycyIsInNsaWRlciIsImluaXQiLCJxdWVyeVNlbGVjdG9yQWxsIiwiY29udmV5b3IiLCJzbGlkZXMiLCJkb3RzV3JhcHBlciIsImRvdHMiLCJ2aXNpYmxlU2xpZGVzIiwic2xpZGVyRW5naW5lIiwiY2hhbmdlQWxsb3ciLCJjdXJyZW50SW5kZXgiLCJpIiwic2xpZGVCYWNrIiwic2xpZGVOZXh0IiwibGVuZ3RoIiwic2xpZGVyVGltZXIiLCJzZXRUaW1lb3V0IiwiYXV0b3NsaWRlIiwiY2xlYXJUaW1lb3V0IiwibG9hZFN0YXJ0Iiwic2xpZGUiLCJmaWx0ZXJJbmRleCIsImNsb25lTm9kZSIsImluc2VydEFkamFjZW50RWxlbWVudCIsImNyZWF0ZURvdHMiLCJkb3QiLCJjcmVhdGVFbGVtZW50IiwiYXBwZW5kIiwiY2hhbmdlRG90IiwidGFyZ2V0RG90IiwibGVmdCIsImNoYW5nZVNsaWRlIiwicmVtb3ZlRXZlbnRMaXN0ZW5lciIsInRvZ2dsZUFjdGl2ZSIsImlkIiwiZWxlbWVudCIsImNvbnNvbGUiLCJlcnJvciIsInRhYnMiLCJ0YWIiLCJ0cmlnZ2VycyIsImRlYWN0aXZhdGUiLCJ0cmlnZ2VyIiwibW9kYWxzIiwiaGVhZGVyIiwib3BlbmVycyIsImNsb3NlcnMiLCJPYmplY3QiLCJ2YWx1ZXMiLCJmb3JFYWNoIiwib3BlbmVyIiwib3BlbldpbmQiLCJvcGVuTW9kYWwiLCJjbG9zZXIiLCJjbG9zZVdpbmQiLCJtb2RhbCIsIndhcm4iLCJib2R5IiwicGFkZGluZ1JpZ2h0Iiwid2luZG93IiwiaW5uZXJXaWR0aCIsImRvY3VtZW50RWxlbWVudCIsImNsaWVudFdpZHRoIiwibW9kYWxCb2R5IiwiZm9ybURyb3BsaXN0cyIsImRyb3BsaXN0cyIsImRyb3BsaXN0IiwiaW5wdXQiLCJsaXN0IiwibGlzdEl0ZW1zIiwiZ2V0RWxlbWVudHNCeVRhZ05hbWUiLCJsaSIsInNldCIsInRhZ05hbWUiLCJ2YWx1ZSIsImlubmVySFRNTCIsIm5leHRzRm9ybSIsImZvcm1zIiwiZm9ybSIsIm5leHRzV3JhcHBlciIsIm5leHRzIiwicmVwbGFjZSIsImZvY3VzIiwiZmluaXNoIiwibmV4dCIsInN1Ym1pdCIsIiQiLCJkYXRlcGlja2VyIiwiZmlyc3REYXkiLCJkYXRlRm9ybWF0IiwiZGF5TmFtZXMiLCJkYXlOYW1lc1Nob3J0IiwiZGF5TmFtZXNNaW4iLCJtb250aE5hbWVzIiwibW9udGhOYW1lc1Nob3J0Iiwic2hvd090aGVyTW9udGhzIiwic2VsZWN0T3RoZXJNb250aHMiLCJvd2xDYXJvdXNlbCIsImxvb3AiLCJtYXJnaW4iLCJuYXYiLCJyZXNwb25zaXZlIiwiaXRlbXMiLCJtYXNrIl0sIm1hcHBpbmdzIjoiOzs7Ozs7QUFBQUEsUUFBUSxDQUFDQyxnQkFBVCxDQUEwQixrQkFBMUIsRUFBOEMsWUFBTTtBQUVuREMsRUFBQUEsY0FBYzs7QUFDZCxXQUFTQSxjQUFULEdBQTBCO0FBQ3pCLFFBQU1DLFNBQVMsR0FBR0gsUUFBUSxDQUFDSSxzQkFBVCxDQUFnQyxtQkFBaEMsRUFBcUQsQ0FBckQsQ0FBbEI7QUFDQSxRQUFNQyxJQUFJLEdBQUdMLFFBQVEsQ0FBQ00sY0FB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LENBQUMsQ0FBQyxjQUFELENBQUQsQ0FBa0JpQixJQUFsQixDQUF1QixtQkFBdkI7QUFFQSxDQXhkRCIsInNvdXJjZXNDb250ZW50IjpbImRvY3VtZW50LmFkZEV2ZW50TGlzdGVuZXIoJ0RPTUNvbnRlbnRMb2FkZWQnLCAoKSA9PiB7XHJcblxyXG5cdGN1dE1lbnVPbkNsaWNrKClcclxuXHRmdW5jdGlvbiBjdXRNZW51T25DbGljaygpIHtcclxuXHRcdGNvbnN0IGhhbWJ1cmdlciA9IGRvY3VtZW50LmdldEVsZW1lbnRzQnlDbGFzc05hbWUoJ2hlYWRlcl9faGFtYnVyZ2VyJylbMF1cclxuXHRcdGNvbnN0IG1lbnUgPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgnaGVhZGVyLWRyb3AnKVxyXG5cclxuXHRcdGRvY3VtZW50LmFkZEV2ZW50TGlzdGVuZXIoJ2NsaWNrJywgKGV2dCkgPT4ge1xyXG5cclxuXHRcdFx0aWYgKCAhbWVudS5jbGFzc0xpc3QuY29udGFpbnMoJ2FjdGl2ZScpICkgcmV0dXJuXHJcblxyXG5cdFx0XHRjb25zdCBtZW51Qm90dG9tID0gbWVudS5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKS5ib3R0b21cclxuXHJcblx0XHRcdGlmIChldnQuY2xpZW50WSA+IG1lbnVCb3R0b20pIHtcclxuXHRcdFx0XHRtZW51LnN0eWxlLmhlaWdodCA9IDBcclxuXHJcblx0XHRcdFx0bWVudS5jbGFzc0xpc3QucmVtb3ZlKCdhY3RpdmUnKVxyXG5cdFx0XHRcdGhhbWJ1cmdlci5jbGFzc0xpc3QucmVtb3ZlKCdhY3RpdmUnKVxyXG5cdFx0XHR9XHJcblxyXG5cdFx0fSlcclxuXHJcblx0fVxyXG5cclxuXHRleHBhbmRFbGVtZW50cygpO1xyXG5cdGZ1bmN0aW9uIGV4cGFuZEVsZW1lbnRzKCkge1xyXG5cdFx0Y29uc3QgdG9nZ2xlcnMgPSBkb2N1bWVudC5nZXRFbGVtZW50c0J5Q2xhc3NOYW1lKCdleHBhbmQtdG9nZ2xlcicpO1xyXG5cclxuXHRcdGZvciAobGV0IHRvZ2dsZXIgb2YgdG9nZ2xlcnMpIHtcclxuXHRcdFx0dG9nZ2xlci5hZGRFdmVudExpc3RlbmVyKCdjbGljaycsIHRvZ2dsZSk7XHJcblx0XHR9XHJcblxyXG5cdFx0ZnVuY3Rpb24gdG9nZ2xlKGV2dCkge1xyXG5cdFx0XHRjb25zdCB0YXJnZXQgPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCh0aGlzLmRhdGFzZXQuZXhwYW5kKTtcclxuXHRcdFx0aWYgKCF0YXJnZXQpIHJldHVybjtcclxuXHJcblx0XHRcdGlmICggdGhpcy5jbGFzc0xpc3QuY29udGFpbnMoJ2FjdGl2ZScpICkge1xyXG5cdFx0XHRcdHRoaXMuY2xhc3NMaXN0LnJlbW92ZSgnYWN0aXZlJyk7XHJcblx0XHRcdFx0aWYgKCB0YXJnZXQuY2xhc3NMaXN0LmNvbnRhaW5zKCdhY3RpdmUnKSApIHtcclxuXHRcdFx0XHRcdHRhcmdldC5jbGFzc0xpc3QucmVtb3ZlKCdhY3RpdmUnKTtcclxuXHRcdFx0XHRcdGN1dCh0YXJnZXQpO1xyXG5cdFx0XHRcdH1cclxuXHRcdFx0fSBlbHNlIHtcclxuXHRcdFx0XHR0aGlzLmNsYXNzTGlzdC5hZGQoJ2FjdGl2ZScpO1xyXG5cdFx0XHRcdGlmICggIXRhcmdldC5jbGFzc0xpc3QuY29udGFpbnMoJ2FjdGl2ZScpICkge1xyXG5cdFx0XHRcdFx0dGFyZ2V0LmNsYXNzTGlzdC5hZGQoJ2FjdGl2ZScpO1xyXG5cdFx0XHRcdFx0ZXhwYW5kKHRhcmdldCk7XHJcblx0XHRcdFx0fVxyXG5cdFx0XHR9XHJcblx0XHR9XHJcblxyXG5cdFx0ZnVuY3Rpb24gY3V0KHRhcmdldCkge1xyXG5cdFx0XHR0YXJnZXQuc3R5bGUuaGVpZ2h0ID0gMDtcclxuXHRcdH1cclxuXHRcdGZ1bmN0aW9uIGV4cGFuZCh0YXJnZXQpIHtcclxuXHRcdFx0Y29uc3QgaGVpZ2h0ID0gdGFyZ2V0LnNjcm9sbEhlaWdodDtcclxuXHRcdFx0dGFyZ2V0LnN0eWxlLmhlaWdodCA9IGhlaWdodCArICdweCc7XHJcblx0XHR9XHJcblx0fVxyXG5cclxuXHRwcmV0dHlTbGlkZXIoKTtcclxuXHRmdW5jdGlvbiBwcmV0dHlTbGlkZXIoKSB7XHJcblxyXG5cdFx0Y29uc3Qgc2xpZGVycyA9IGRvY3VtZW50LmdldEVsZW1lbnRzQnlDbGFzc05hbWUoJ3ByZXR0eS1zbGlkZXInKTtcclxuXHJcblx0XHRmb3IgKGxldCBzbGlkZXIgb2Ygc2xpZGVycykge1xyXG5cdFx0XHRpbml0KHNsaWRlcik7XHJcblx0XHR9XHJcblxyXG5cdFx0ZnVuY3Rpb24gaW5pdChzbGlkZXIpIHtcclxuXHRcdFx0Y29uc3QgdG9nZ2xlcnMgICAgICA9IHNsaWRlci5xdWVyeVNlbGVjdG9yQWxsKCcucHJldHR5LXNsaWRlcl9fbmF2aWdhdGlvbiAuLWFycm93Jyk7XHJcblx0XHRcdGNvbnN0IGNvbnZleW9yICAgICAgPSBzbGlkZXIuZ2V0RWxlbWVudHNCeUNsYXNzTmFtZSgncHJldHR5LXNsaWRlcl9fdmlzaWJsZS1zbGlkZXMtd3JhcHBlcicpWzBdO1xyXG5cdFx0XHRjb25zdCBzbGlkZXMgICAgICAgID0gc2xpZGVyLnF1ZXJ5U2VsZWN0b3JBbGwoJy5wcmV0dHktc2xpZGVyX19oaWRkZW4tc2xpZGVzIC5wcmV0dHktc2xpZGVyX19zbGlkZScpO1xyXG5cdFx0XHRjb25zdCBkb3RzV3JhcHBlciAgID0gc2xpZGVyLmdldEVsZW1lbnRzQnlDbGFzc05hbWUoJ3ByZXR0eS1zbGlkZXJfX2RvdHMnKVswXTtcclxuXHRcdFx0Y29uc3QgZG90cyAgICAgICAgICA9IGRvdHNXcmFwcGVyLmdldEVsZW1lbnRzQnlDbGFzc05hbWUoJy1kb3QnKTtcclxuXHRcdFx0Y29uc3QgdmlzaWJsZVNsaWRlcyA9IGNvbnZleW9yLmdldEVsZW1lbnRzQnlDbGFzc05hbWUoJ3ByZXR0eS1zbGlkZXJfX3NsaWRlJyk7XHJcblx0XHRcdGNvbnN0IHNsaWRlckVuZ2luZSAgPSBzbGlkZXIuZ2V0RWxlbWVudHNCeUNsYXNzTmFtZSgncHJldHR5LXNsaWRlcl9fd3JhcHBlcicpWzBdO1xyXG5cdFx0XHRcdFx0XHRcclxuXHRcdFx0aWYgKCAhY29udmV5b3IgKSByZXR1cm47XHJcblx0XHRcdFxyXG5cdFx0XHRsZXQgY2hhbmdlQWxsb3cgPSB0cnVlO1xyXG5cdFx0XHRsZXQgY3VycmVudEluZGV4ID0gMDtcclxuXHJcblx0XHRcdGZvciAobGV0IGkgPSAwOyBpIDwgdG9nZ2xlcnMubGVuZ3RoOyBpKyspIHtcclxuXHRcdFx0XHR0b2dnbGVyc1tpXS5hZGRFdmVudExpc3RlbmVyKCdjbGljaycsICgpID0+IHtcclxuXHRcdFx0XHRcdGlmICghY2hhbmdlQWxsb3cpIHJldHVybjtcclxuXHRcdFx0XHRcdGlmIChpID09IDApIHNsaWRlQmFjaygpO1xyXG5cdFx0XHRcdFx0aWYgKGkgPT0gMSkgc2xpZGVOZXh0KCk7XHJcblx0XHRcdFx0fSk7XHJcblx0XHRcdH1cclxuXHJcblx0XHRcdGxldCBzbGlkZXJUaW1lciA9IHNldFRpbWVvdXQoYXV0b3NsaWRlLCAzMDAwKTtcclxuXHRcdFx0ZnVuY3Rpb24gYXV0b3NsaWRlKCkge1xyXG5cdFx0XHRcdHNsaWRlTmV4dCgpO1xyXG5cdFx0XHRcdHNsaWRlclRpbWVyID0gc2V0VGltZW91dChhdXRvc2xpZGUsIDMwMDApO1xyXG5cdFx0XHR9XHJcblxyXG5cdFx0XHRpZiAoc2xpZGVyRW5naW5lKSB7XHJcblx0XHRcdFx0c2xpZGVyRW5naW5lLmFkZEV2ZW50TGlzdGVuZXIoJ21vdXNlZW50ZXInLCAoKSA9PiB7XHJcblx0XHRcdFx0XHRjbGVhclRpbWVvdXQoc2xpZGVyVGltZXIpO1xyXG5cdFx0XHRcdH0pO1xyXG5cdFx0XHRcdHNsaWRlckVuZ2luZS5hZGRFdmVudExpc3RlbmVyKCdtb3VzZWxlYXZlJywgKCkgPT4ge1xyXG5cdFx0XHRcdFx0c2xpZGVyVGltZXIgPSBzZXRUaW1lb3V0KGF1dG9zbGlkZSwgMzAwMCk7XHJcblx0XHRcdFx0fSk7XHJcblx0XHRcdH1cclxuXHJcblx0XHRcdGxvYWRTdGFydCgpO1xyXG5cdFx0XHRmdW5jdGlvbiBsb2FkU3RhcnQoKSB7XHJcblx0XHRcdFx0Zm9yIChsZXQgaSA9IC0xOyBpIDwgMjsgaSsrKSB7XHJcblx0XHRcdFx0XHRjb25zdCBzbGlkZSA9IHNsaWRlc1sgZmlsdGVySW5kZXgoaSkgXS5jbG9uZU5vZGUodHJ1ZSk7XHJcblx0XHRcdFx0XHRjb252ZXlvci5pbnNlcnRBZGphY2VudEVsZW1lbnQoJ2JlZm9yZWVuZCcsIHNsaWRlKTtcclxuXHRcdFx0XHR9XHJcblx0XHRcdH1cclxuXHJcblx0XHRcdGNyZWF0ZURvdHMoKTtcclxuXHRcdFx0ZnVuY3Rpb24gY3JlYXRlRG90cygpIHtcclxuXHRcdFx0XHRpZiAoICFkb3RzV3JhcHBlciApIHJldHVybjtcclxuXHRcdFx0XHRmb3IgKGxldCBpID0gMDsgaSA8IHNsaWRlcy5sZW5ndGg7IGkrKykge1xyXG5cdFx0XHRcdFx0Y29uc3QgZG90ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnZGl2Jyk7XHJcblx0XHRcdFx0XHRkb3QuY2xhc3NMaXN0LmFkZCgnLWRvdCcpO1xyXG5cdFx0XHRcdFx0ZG90c1dyYXBwZXIuYXBwZW5kKGRvdCk7XHJcblx0XHRcdFx0fVxyXG5cdFx0XHR9XHJcblxyXG5cdFx0XHRjaGFuZ2VEb3QoKTtcclxuXHRcdFx0ZnVuY3Rpb24gY2hhbmdlRG90KCkge1xyXG5cdFx0XHRcdGZvciAobGV0IGRvdCBvZiBkb3RzKSB7XHJcblx0XHRcdFx0XHRkb3QuY2xhc3NMaXN0LnJlbW92ZSgnYWN0aXZlJyk7XHJcblx0XHRcdFx0fVxyXG5cdFx0XHRcdGxldCB0YXJnZXREb3QgPSBkb3RzW2N1cnJlbnRJbmRleF07XHJcblx0XHRcdFx0aWYgKHRhcmdldERvdCkgdGFyZ2V0RG90LmNsYXNzTGlzdC5hZGQoJ2FjdGl2ZScpO1xyXG5cdFx0XHR9XHJcblxyXG5cdFx0XHRmdW5jdGlvbiBmaWx0ZXJJbmRleChpKSB7XHJcblx0XHRcdFx0aWYgKGkgPCAwKSByZXR1cm4gc2xpZGVzLmxlbmd0aCAtIDE7XHJcblx0XHRcdFx0aWYgKGkgPj0gc2xpZGVzLmxlbmd0aCkgcmV0dXJuIDA7XHJcblx0XHRcdFx0cmV0dXJuIGk7XHJcblx0XHRcdH1cclxuXHJcblx0XHRcdGZ1bmN0aW9uIHNsaWRlQmFjaygpIHtcclxuXHRcdFx0XHQvLyDQktC60LvRjtGH0LDQtdC8INCw0L3QuNC80LDRhtC40Y4g0Lgg0L/QtdGA0LXQu9C40YHRgtGL0LLQsNC10LxcclxuXHRcdFx0XHRjdXJyZW50SW5kZXggPSBmaWx0ZXJJbmRleChjdXJyZW50SW5kZXggLSAxKTtcclxuXHRcdFx0XHRjaGFuZ2VBbGxvdyA9IGZhbHNlO1xyXG5cdFx0XHRcdGNvbnZleW9yLmNsYXNzTGlzdC5yZW1vdmUoJy0tbm8tYW5pbWF0ZScpO1xyXG5cdFx0XHRcdGNvbnZleW9yLnN0eWxlLmxlZnQgPSAnMCc7XHJcblxyXG5cdFx0XHRcdGNoYW5nZURvdCgpO1xyXG5cclxuXHRcdFx0XHRjb252ZXlvci5hZGRFdmVudExpc3RlbmVyKCd0cmFuc2l0aW9uZW5kJywgZnVuY3Rpb24gY2hhbmdlU2xpZGUoKSB7XHJcblx0XHRcdFx0XHQvLyDQktGL0LrQu9GO0YfQsNC10Lwg0LDQvdC40LzQsNGG0LjRjlxyXG5cdFx0XHRcdFx0Y29udmV5b3IuY2xhc3NMaXN0LmFkZCgnLS1uby1hbmltYXRlJyk7XHJcblxyXG5cdFx0XHRcdFx0Ly8g0KPQtNCw0LvRj9C10Lwg0L3QtdC90YPQttC90YvQuSDRgdC70LDQudC0XHJcblx0XHRcdFx0XHR2aXNpYmxlU2xpZGVzWyB2aXNpYmxlU2xpZGVzLmxlbmd0aC0xIF0ucmVtb3ZlKCk7XHJcblxyXG5cdFx0XHRcdFx0Ly8g0JrQvtC/0LjRgNGD0LXQvCDQuCDQstGB0YLQsNCy0LvRj9C10Lwg0LTQvtC/0L7Qu9C90LjRgtC10LvRjNC90YvQuSDRgdC70LDQudC0XHJcblx0XHRcdFx0XHRjb25zdCBzbGlkZSA9IHNsaWRlc1sgZmlsdGVySW5kZXgoY3VycmVudEluZGV4LTEpIF0uY2xvbmVOb2RlKHRydWUpO1xyXG5cdFx0XHRcdFx0Y29udmV5b3IuaW5zZXJ0QWRqYWNlbnRFbGVtZW50KCdhZnRlcmJlZ2luJywgc2xpZGUpO1xyXG5cclxuXHRcdFx0XHRcdGNvbnZleW9yLnN0eWxlLmxlZnQgPSAnLTEwMCUnO1xyXG5cdFx0XHRcdFx0Y2hhbmdlQWxsb3cgPSB0cnVlO1xyXG5cdFx0XHRcdFx0Y29udmV5b3IucmVtb3ZlRXZlbnRMaXN0ZW5lcigndHJhbnNpdGlvbmVuZCcsIGNoYW5nZVNsaWRlKTtcclxuXHRcdFx0XHR9KTtcclxuXHJcblx0XHRcdH1cclxuXHJcblx0XHRcdGZ1bmN0aW9uIHNsaWRlTmV4dCgpIHtcclxuXHRcdFx0XHQvLyDQktC60LvRjtGH0LDQtdC8INCw0L3QuNC80LDRhtC40Y4g0Lgg0L/QtdGA0LXQu9C40YHRgtGL0LLQsNC10LxcclxuXHRcdFx0XHRjdXJyZW50SW5kZXggPSBmaWx0ZXJJbmRleChjdXJyZW50SW5kZXggKyAxKTtcclxuXHRcdFx0XHRjaGFuZ2VBbGxvdyA9IGZhbHNlO1xyXG5cdFx0XHRcdGNvbnZleW9yLmNsYXNzTGlzdC5yZW1vdmUoJy0tbm8tYW5pbWF0ZScpO1xyXG5cdFx0XHRcdGNvbnZleW9yLnN0eWxlLmxlZnQgPSAnLTIwMCUnO1xyXG5cclxuXHRcdFx0XHRjaGFuZ2VEb3QoKTtcclxuXHJcblx0XHRcdFx0Y29udmV5b3IuYWRkRXZlbnRMaXN0ZW5lcigndHJhbnNpdGlvbmVuZCcsIGZ1bmN0aW9uIGNoYW5nZVNsaWRlKCkge1xyXG5cdFx0XHRcdFx0Ly8g0JLRi9C60LvRjtGH0LDQtdC8INCw0L3QuNC80LDRhtC40Y5cclxuXHRcdFx0XHRcdGNvbnZleW9yLmNsYXNzTGlzdC5hZGQoJy0tbm8tYW5pbWF0ZScpO1xyXG5cclxuXHRcdFx0XHRcdC8vINCj0LTQsNC70Y/QtdC8INC90LXQvdGD0LbQvdGL0Lkg0YHQu9Cw0LnQtFxyXG5cdFx0XHRcdFx0dmlzaWJsZVNsaWRlc1swXS5yZW1vdmUoKTtcclxuXHJcblx0XHRcdFx0XHQvLyDQmtC+0L/QuNGA0YPQtdC8INC4INCy0YHRgtCw0LLQu9GP0LXQvCDQtNC+0L/QvtC70L3QuNGC0LXQu9GM0L3Ri9C5INGB0LvQsNC50LRcclxuXHRcdFx0XHRcdGNvbnN0IHNsaWRlID0gc2xpZGVzWyBmaWx0ZXJJbmRleChjdXJyZW50SW5kZXgrMSkgXS5jbG9uZU5vZGUodHJ1ZSk7XHJcblx0XHRcdFx0XHRjb252ZXlvci5pbnNlcnRBZGphY2VudEVsZW1lbnQoJ2JlZm9yZWVuZCcsIHNsaWRlKTtcclxuXHJcblx0XHRcdFx0XHRjb252ZXlvci5zdHlsZS5sZWZ0ID0gJy0xMDAlJztcclxuXHRcdFx0XHRcdGNoYW5nZUFsbG93ID0gdHJ1ZTtcclxuXHRcdFx0XHRcdGNvbnZleW9yLnJlbW92ZUV2ZW50TGlzdGVuZXIoJ3RyYW5zaXRpb25lbmQnLCBjaGFuZ2VTbGlkZSk7XHJcblx0XHRcdFx0fSk7XHJcblxyXG5cdFx0XHR9XHJcblxyXG5cdFx0fVxyXG5cclxuXHR9XHJcblxyXG5cdHRvZ2dsZUFjdGl2ZSgpO1xyXG5cdGZ1bmN0aW9uIHRvZ2dsZUFjdGl2ZSgpIHtcclxuXHRcdGNvbnN0IHRvZ2dsZXJzID0gZG9jdW1lbnQuZ2V0RWxlbWVudHNCeUNsYXNzTmFtZSgndG9nZ2xlLWFjdGl2ZScpO1xyXG5cclxuXHRcdGZvciAobGV0IHRvZ2dsZXIgb2YgdG9nZ2xlcnMpIHtcclxuXHRcdFx0dG9nZ2xlci5hZGRFdmVudExpc3RlbmVyKCdjbGljaycsIHRvZ2dsZSk7XHJcblx0XHR9XHJcblxyXG5cdFx0ZnVuY3Rpb24gdG9nZ2xlKCkge1xyXG5cdFx0XHRjb25zdCBpZCA9IHRoaXMuZGF0YXNldC50b2dnbGVBY3RpdmU7XHJcblx0XHRcdGNvbnN0IGVsZW1lbnQgPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZChpZCk7XHJcblx0XHRcdGlmIChlbGVtZW50KSB7XHJcblx0XHRcdFx0ZWxlbWVudC5jbGFzc0xpc3QudG9nZ2xlKCdhY3RpdmUnKTtcclxuXHRcdFx0XHR0aGlzLmNsYXNzTGlzdC50b2dnbGUoJ2FjdGl2ZScpO1xyXG5cdFx0XHR9IGVsc2Uge1xyXG5cdFx0XHRcdGNvbnNvbGUuZXJyb3IoYEVsZW1lbnQgYnkgaWQgXCIke2lkfVwiIG5vdCBmb3VuZCFgKTtcclxuXHRcdFx0fVxyXG5cdFx0fVxyXG5cdH1cclxuXHJcblx0dGFicygpO1xyXG5cdGZ1bmN0aW9uIHRhYnMoKSB7XHJcblx0XHRjb25zdCB0YWJzID0gZG9jdW1lbnQuZ2V0RWxlbWVudHNCeUNsYXNzTmFtZSgndGFicy1zeXN0ZW0nKTtcclxuXHRcdGZvciAobGV0IHRhYiBvZiB0YWJzKSB7XHJcblx0XHRcdGluaXQodGFiKTtcclxuXHRcdH1cclxuXHJcblx0XHRmdW5jdGlvbiBpbml0KHRhYikge1xyXG5cdFx0XHRjb25zdCB0cmlnZ2VycyA9IHRhYi5nZXRFbGVtZW50c0J5Q2xhc3NOYW1lKCd0YWJzLXN5c3RlbV9fdHJpZ2dlcicpO1xyXG5cdFx0XHRjb25zdCB0YWJzID0gdGFiLmdldEVsZW1lbnRzQnlDbGFzc05hbWUoJ3RhYnMtc3lzdGVtX190YWInKTtcclxuXHJcblx0XHRcdGZvciAobGV0IGkgPSAwOyBpIDwgdHJpZ2dlcnMubGVuZ3RoOyBpKyspIHtcclxuXHRcdFx0XHR0cmlnZ2Vyc1tpXS5hZGRFdmVudExpc3RlbmVyKCdjbGljaycsICgpID0+IHtcclxuXHRcdFx0XHRcdGlmICggdGFic1tpXSApIHtcclxuXHRcdFx0XHRcdFx0ZGVhY3RpdmF0ZSgpO1xyXG5cdFx0XHRcdFx0XHR0YWJzW2ldLmNsYXNzTGlzdC5hZGQoJ2FjdGl2ZScpO1xyXG5cdFx0XHRcdFx0XHR0cmlnZ2Vyc1tpXS5jbGFzc0xpc3QuYWRkKCdhY3RpdmUnKTtcclxuXHRcdFx0XHRcdH1cclxuXHRcdFx0XHR9KTtcclxuXHRcdFx0fVxyXG5cclxuXHRcdFx0ZnVuY3Rpb24gZGVhY3RpdmF0ZSgpIHtcclxuXHRcdFx0XHRmb3IgKGxldCB0YWIgb2YgdGFicykge1xyXG5cdFx0XHRcdFx0dGFiLmNsYXNzTGlzdC5yZW1vdmUoJ2FjdGl2ZScpO1xyXG5cdFx0XHRcdH1cclxuXHRcdFx0XHRmb3IgKGxldCB0cmlnZ2VyIG9mIHRyaWdnZXJzKSB7XHJcblx0XHRcdFx0XHR0cmlnZ2VyLmNsYXNzTGlzdC5yZW1vdmUoJ2FjdGl2ZScpO1xyXG5cdFx0XHRcdH1cclxuXHRcdFx0fVxyXG5cdFx0fVxyXG5cdH1cclxuXHJcblx0bW9kYWxzKClcclxuXHRmdW5jdGlvbiBtb2RhbHMoKSB7XHJcblx0XHRjb25zdCBtb2RhbHMgPSBkb2N1bWVudC5nZXRFbGVtZW50c0J5Q2xhc3NOYW1lKCdtb2RhbCcpXHJcblx0XHRjb25zdCBoZWFkZXIgPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgnaGVhZGVyJylcclxuXHRcdGNvbnN0IG9wZW5lcnMgPSBkb2N1bWVudC5nZXRFbGVtZW50c0J5Q2xhc3NOYW1lKCdvcGVuLW1vZGFsJylcclxuXHRcdGNvbnN0IGNsb3NlcnMgPSBkb2N1bWVudC5nZXRFbGVtZW50c0J5Q2xhc3NOYW1lKCdjbG9zZS1tb2RhbCcpXHJcblxyXG5cdFx0T2JqZWN0LnZhbHVlcyhvcGVuZXJzKS5mb3JFYWNoKG9wZW5lciA9PiB7XHJcblx0XHRcdG9wZW5lci5hZGRFdmVudExpc3RlbmVyKCdjbGljaycsICgpID0+IHtcclxuXHRcdFx0XHRvcGVuV2luZChvcGVuZXIuZGF0YXNldC5vcGVuTW9kYWwpXHJcblx0XHRcdH0pXHJcblx0XHR9KVxyXG5cclxuXHRcdE9iamVjdC52YWx1ZXMoY2xvc2VycykuZm9yRWFjaChjbG9zZXIgPT4ge1xyXG5cdFx0XHRjbG9zZXIuYWRkRXZlbnRMaXN0ZW5lcignY2xpY2snLCAoKSA9PiB7XHJcblx0XHRcdFx0Y2xvc2VXaW5kKClcclxuXHRcdFx0fSlcclxuXHRcdH0pXHJcblxyXG5cdFx0ZnVuY3Rpb24gb3BlbldpbmQoaWQpIHtcdFx0XHRcclxuXHRcdFx0Y29uc3QgbW9kYWwgPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZChpZClcclxuXHRcdFx0aWYgKCAhbW9kYWwgKSB7XHJcblx0XHRcdFx0Y29uc29sZS53YXJuKCfQnNC+0LTQsNC70YzQvdC+0LPQviDQvtC60L3QsCDRgSBpZCBcIicgKyBpZCArICdcIiDQvdC1INGB0YPRidC10YHRgtCy0YPQtdGCJylcclxuXHRcdFx0XHRyZXR1cm5cclxuXHRcdFx0fVxyXG5cclxuXHRcdFx0ZG9jdW1lbnQuYm9keS5zdHlsZS5wYWRkaW5nUmlnaHQgPSB3aW5kb3cuaW5uZXJXaWR0aCAtIGRvY3VtZW50LmRvY3VtZW50RWxlbWVudC5jbGllbnRXaWR0aCArICdweCdcclxuXHRcdFx0aGVhZGVyLnN0eWxlLnBhZGRpbmdSaWdodCA9IHdpbmRvdy5pbm5lcldpZHRoIC0gZG9jdW1lbnQuZG9jdW1lbnRFbGVtZW50LmNsaWVudFdpZHRoICsgJ3B4J1xyXG5cdFx0XHRkb2N1bWVudC5ib2R5LmNsYXNzTGlzdC5hZGQoJy0tZml4ZWQnKVxyXG5cclxuXHRcdFx0Y29uc3QgbW9kYWxCb2R5ID0gbW9kYWwuZ2V0RWxlbWVudHNCeUNsYXNzTmFtZSgnbW9kYWxfX2JvZHknKVswXVxyXG5cclxuXHRcdFx0bW9kYWwuY2xhc3NMaXN0LmFkZCgnYWN0aXZlJylcclxuXHRcdFx0bW9kYWwuY2xhc3NMaXN0LmFkZCgnLS10cmFuc3BhcmVudCcpXHJcblxyXG5cdFx0XHRtb2RhbEJvZHkuY2xhc3NMaXN0LmFkZCgnYWN0aXZlJylcclxuXHRcdFx0bW9kYWxCb2R5LmNsYXNzTGlzdC5hZGQoJy0tdHJhbnNwYXJlbnQnKVxyXG5cdFx0XHRcclxuXHRcdFx0c2V0VGltZW91dCggKCkgPT4ge1xyXG5cdFx0XHRcdG1vZGFsLmNsYXNzTGlzdC5yZW1vdmUoJy0tdHJhbnNwYXJlbnQnKVxyXG5cclxuXHRcdFx0XHRtb2RhbEJvZHkuY2xhc3NMaXN0LnJlbW92ZSgnLS10cmFuc3BhcmVudCcpXHJcblx0XHRcdH0gKVxyXG5cdFx0fVxyXG5cclxuXHRcdGZ1bmN0aW9uIGNsb3NlV2luZCgpIHtcclxuXHRcdFx0XHJcblx0XHRcdE9iamVjdC52YWx1ZXMobW9kYWxzKS5mb3JFYWNoKG1vZGFsID0+IHtcclxuXHRcdFx0XHRjb25zdCBtb2RhbEJvZHkgPSBtb2RhbC5nZXRFbGVtZW50c0J5Q2xhc3NOYW1lKCdtb2RhbF9fYm9keScpWzBdXHJcblx0XHRcdFx0XHJcblx0XHRcdFx0bW9kYWwuY2xhc3NMaXN0LmFkZCgnLS10cmFuc3BhcmVudCcpXHJcblx0XHRcdFx0bW9kYWxCb2R5LmNsYXNzTGlzdC5hZGQoJy0tdHJhbnNwYXJlbnQnKVxyXG5cclxuXHRcdFx0XHRzZXRUaW1lb3V0KCAoKSA9PiB7XHJcblx0XHRcdFx0XHRtb2RhbC5jbGFzc0xpc3QucmVtb3ZlKCdhY3RpdmUnKVxyXG5cdFx0XHRcdFx0bW9kYWwuY2xhc3NMaXN0LnJlbW92ZSgnLS10cmFuc3BhcmVudCcpXHJcblx0XHJcblx0XHRcdFx0XHRtb2RhbEJvZHkuY2xhc3NMaXN0LnJlbW92ZSgnYWN0aXZlJylcclxuXHRcdFx0XHRcdG1vZGFsQm9keS5jbGFzc0xpc3QucmVtb3ZlKCctLXRyYW5zcGFyZW50JylcclxuXHRcclxuXHRcdFx0XHR9LCAzMDAgKVxyXG5cdFx0XHRcdFxyXG5cdFx0XHR9KVxyXG5cdFx0XHRcclxuXHRcdFx0c2V0VGltZW91dCggKCkgPT4ge1xyXG5cdFx0XHRcdGRvY3VtZW50LmJvZHkuc3R5bGUucGFkZGluZ1JpZ2h0ID0gMFxyXG5cdFx0XHRcdGhlYWRlci5zdHlsZS5wYWRkaW5nUmlnaHQgPSAwXHJcblx0XHRcdFx0ZG9jdW1lbnQuYm9keS5jbGFzc0xpc3QucmVtb3ZlKCctLWZpeGVkJylcclxuXHRcdFx0fSwgMzAwIClcclxuXHJcblx0XHR9XHJcblxyXG5cdH1cclxuXHJcblx0Zm9ybURyb3BsaXN0cygpO1xyXG5cdGZ1bmN0aW9uIGZvcm1Ecm9wbGlzdHMoKSB7XHJcblxyXG5cdFx0Y29uc3QgZHJvcGxpc3RzID0gZG9jdW1lbnQuZ2V0RWxlbWVudHNCeUNsYXNzTmFtZSgnaW5wdXQtZHJvcGxpc3QnKTtcclxuXHJcblx0XHRmb3IgKGxldCBkcm9wbGlzdCBvZiBkcm9wbGlzdHMpIHtcclxuXHRcdFx0aW5pdChkcm9wbGlzdCk7XHJcblx0XHR9XHJcblxyXG5cdFx0ZnVuY3Rpb24gaW5pdChkcm9wbGlzdCkge1xyXG5cdFx0XHRjb25zdCBpbnB1dCAgICAgID0gZHJvcGxpc3QuZ2V0RWxlbWVudHNCeUNsYXNzTmFtZSgnLWlucHV0JylbMF07XHJcblx0XHRcdGNvbnN0IGxpc3QgICAgICAgPSBkcm9wbGlzdC5nZXRFbGVtZW50c0J5Q2xhc3NOYW1lKCctbGlzdCcpWzBdO1xyXG5cdFx0XHRjb25zdCBsaXN0SXRlbXMgID0gZHJvcGxpc3QuZ2V0RWxlbWVudHNCeVRhZ05hbWUoJ2xpJyk7XHJcblxyXG5cdFx0XHRpZiAoICFpbnB1dCB8fCAhbGlzdCApIHJldHVybjtcclxuXHJcblx0XHRcdGlucHV0LmFkZEV2ZW50TGlzdGVuZXIoJ2ZvY3VzJywgZnVuY3Rpb24oZXZ0KSB7XHJcblx0XHRcdFx0bGlzdC5jbGFzc0xpc3QuYWRkKCdhY3RpdmUnKTtcclxuXHRcdFx0fSk7XHJcblx0XHRcdGlucHV0LmFkZEV2ZW50TGlzdGVuZXIoJ2JsdXInLCBmdW5jdGlvbihldnQpIHtcclxuXHRcdFx0XHRzZXRUaW1lb3V0KCAoKSA9PiB7XHJcblx0XHRcdFx0XHRsaXN0LmNsYXNzTGlzdC5yZW1vdmUoJ2FjdGl2ZScpO1xyXG5cdFx0XHRcdH0sIDEwMCk7XHJcblx0XHRcdH0pO1xyXG5cclxuXHRcdFx0Zm9yIChsZXQgbGkgb2YgbGlzdEl0ZW1zKSB7XHJcblx0XHRcdFx0bGkuYWRkRXZlbnRMaXN0ZW5lcignbW91c2Vkb3duJywgc2V0KTtcclxuXHRcdFx0fVxyXG5cclxuXHRcdFx0ZnVuY3Rpb24gc2V0KGV2dCkge1xyXG5cdFx0XHRcdGlmICggaW5wdXQudGFnTmFtZSA9PSAnSU5QVVQnICkgaW5wdXQudmFsdWUgPSB0aGlzLmRhdGFzZXQudmFsdWU7XHJcblx0XHRcdFx0aWYgKCBpbnB1dC50YWdOYW1lID09ICdESVYnICkge1xyXG5cdFx0XHRcdFx0aW5wdXQuaW5uZXJIVE1MID0gdGhpcy5pbm5lckhUTUw7XHJcblx0XHRcdFx0XHRpbnB1dC5kYXRhc2V0LnZhbHVlID0gdGhpcy5kYXRhc2V0LnZhbHVlO1xyXG5cdFx0XHRcdH1cclxuXHRcdFx0fVxyXG5cdFx0fVxyXG5cclxuXHR9XHJcblxyXG5cdG5leHRzRm9ybSgpXHJcblx0ZnVuY3Rpb24gbmV4dHNGb3JtKCkge1xyXG5cclxuXHRcdGNvbnN0IGZvcm1zID0gZG9jdW1lbnQuZ2V0RWxlbWVudHNCeUNsYXNzTmFtZSgnbmV4dHMtZm9ybScpXHJcblxyXG5cdFx0T2JqZWN0LnZhbHVlcyhmb3JtcykuZm9yRWFjaChpbml0KVxyXG5cclxuXHRcdGZ1bmN0aW9uIGluaXQoZm9ybSkge1xyXG5cdFx0XHRjb25zdCBpbnB1dCA9IGZvcm0uZ2V0RWxlbWVudHNCeUNsYXNzTmFtZSgnbmV4dHMtZm9ybV9faW5wdXQnKVswXVxyXG5cclxuXHRcdFx0aWYgKCAhaW5wdXQgKSB7XHJcblx0XHRcdFx0Y29uc29sZS53YXJuKCfQndC1INC+0LHQvdCw0YDRg9C20LXQvSBcImlucHV0Lm5leHRzLWZvcm1fX2lucHV0XCIhJylcclxuXHRcdFx0XHRyZXR1cm5cclxuXHRcdFx0fVxyXG5cclxuXHRcdFx0Y29uc3QgbmV4dHNXcmFwcGVyID0gZm9ybS5nZXRFbGVtZW50c0J5Q2xhc3NOYW1lKCduZXh0cy1mb3JtX19jZWxscycpWzBdXHJcblx0XHRcdGNvbnN0IG5leHRzID0gbmV4dHNXcmFwcGVyLmdldEVsZW1lbnRzQnlUYWdOYW1lKCdpbnB1dCcpXHJcblxyXG5cdFx0XHRPYmplY3QudmFsdWVzKG5leHRzKS5mb3JFYWNoKCAoaW5wdXQsIGkpID0+IHtcclxuXHRcdFx0XHRpbnB1dC52YWx1ZSA9ICcnXHJcblxyXG5cdFx0XHRcdGlucHV0LmFkZEV2ZW50TGlzdGVuZXIoJ2lucHV0JywgZXZ0ID0+e1xyXG5cdFx0XHRcdFx0aW5wdXQudmFsdWUgPSBpbnB1dC52YWx1ZS5yZXBsYWNlKC9bXlxcZF0vZywnJylcclxuXHJcblx0XHRcdFx0XHRpZiAoaW5wdXQudmFsdWUubGVuZ3RoID4gMCkge1xyXG5cdFx0XHRcdFx0XHRpZiAoaSA8IG5leHRzLmxlbmd0aC0xKSB7XHJcblx0XHRcdFx0XHRcdFx0bmV4dHNbaSsxXS5mb2N1cygpXHJcblx0XHRcdFx0XHRcdFx0aW5wdXQudmFsdWUgPSBpbnB1dC52YWx1ZVsgaW5wdXQudmFsdWUubGVuZ3RoLTEgXVxyXG5cdFx0XHRcdFx0XHR9IGVsc2Uge1xyXG5cdFx0XHRcdFx0XHRcdGlucHV0LnZhbHVlID0gaW5wdXQudmFsdWVbIGlucHV0LnZhbHVlLmxlbmd0aC0xIF1cclxuXHRcdFx0XHRcdFx0XHRmaW5pc2goKVxyXG5cdFx0XHRcdFx0XHR9XHJcblx0XHRcdFx0XHR9XHJcblxyXG5cdFx0XHRcdH0pXHJcblx0XHRcdH0gKVxyXG5cclxuXHRcdFx0ZnVuY3Rpb24gZmluaXNoKCkge1xyXG5cdFx0XHRcdGlucHV0LnZhbHVlID0gJydcclxuXHJcblx0XHRcdFx0T2JqZWN0LnZhbHVlcyhuZXh0cykuZm9yRWFjaChuZXh0ID0+IHtcclxuXHRcdFx0XHRcdGlucHV0LnZhbHVlICs9IG5leHQudmFsdWVcclxuXHRcdFx0XHR9KVxyXG5cclxuXHRcdFx0XHRpZiAoaW5wdXQudmFsdWUubGVuZ3RoID09PSA0KSB7XHJcblx0XHRcdFx0XHRzZXRUaW1lb3V0KCAoKSA9PiB7XHJcblx0XHRcdFx0XHRcdG5leHRzV3JhcHBlci5jbGFzc0xpc3QuYWRkKCctLWRvbmUnKVxyXG5cdFx0XHRcdFx0fSwgMjAwKVxyXG5cdFx0XHRcdFx0Zm9ybS5zdWJtaXQoKVxyXG5cdFx0XHRcdH0gZWxzZSB7XHJcblx0XHRcdFx0XHRuZXh0c1dyYXBwZXIuY2xhc3NMaXN0LmFkZCgnLS1lcnJvcicpXHJcblx0XHRcdFx0XHRpbnB1dC5jbGFzc0xpc3QuYWRkKCctLWVycm9yJylcclxuXHRcdFx0XHR9XHJcblx0XHRcdH1cclxuXHJcblx0XHR9XHJcblxyXG5cdH1cclxuXHJcblx0JCggXCIjZGF0ZXBpY2tlclwiICkuZGF0ZXBpY2tlciggeyBcclxuXHRcdGZpcnN0RGF5OiAxLFxyXG5cdFx0ZGF0ZUZvcm1hdDogXCJkZC5tbS55eVwiLFxyXG5cdFx0ZGF5TmFtZXM6IFsgXCLQktC+0YHQutGA0LXRgdC10L3RjNC1XCIsIFwi0J/QvtC90LXQtNC10LvRjNC90LjQulwiLCBcItCS0YLQvtGA0L3QuNC6XCIsIFwi0KHRgNC10LTQsFwiLCBcItCn0LXRgtCy0LXRgNCzXCIsIFwi0J/Rj9GC0L3QuNGG0LBcIiwgXCLQodGD0LHQsdC+0YLQsFwiIF0sXHJcblx0XHRkYXlOYW1lc1Nob3J0OiBbIFwi0JLRgdC6XCIsIFwi0J/QvdC0XCIsIFwi0JLRgtGAXCIsIFwi0KHRgNC0XCIsIFwi0KfRgtCyXCIsIFwi0J/RgtC9XCIsIFwi0KHQsdGCXCIgXSxcclxuXHRcdGRheU5hbWVzTWluOiBbIFwi0JLRgVwiLCBcItCf0L1cIiwgXCLQktGCXCIsIFwi0KHRgFwiLCBcItCn0YJcIiwgXCLQn9GCXCIsIFwi0KHQsVwiIF0sXHJcblx0XHRtb250aE5hbWVzOiBbIFwi0K/QvdCy0LDRgNGMXCIsIFwi0KTQtdCy0YDQsNC70YxcIiwgXCLQnNCw0YDRglwiLCBcItCQ0L/RgNC10LvRjFwiLCBcItCc0LDQuVwiLCBcItCY0Y7QvdGMXCIsIFwi0JjRjtC70YxcIiwgXCLQkNCy0LPRg9GB0YJcIiwgXCLQodC10L3RgtGP0LHRgNGMXCIsIFwi0J7QutGA0Y/QsdGA0YxcIiwgXCLQndC+0Y/QsdGA0YxcIiwgXCLQlNC10LrQsNCx0YDRjFwiIF0sXHJcblx0XHRtb250aE5hbWVzU2hvcnQ6IFsgXCLQr9C90LJcIiwgXCLQpNC10LJcIiwgXCLQnNCw0YBcIiwgXCLQkNC/0YBcIiwgXCLQnNCw0LlcIiwgXCLQmNGO0L1cIiwgXCLQmNGO0LtcIiwgXCLQkNCy0LNcIiwgXCLQodC10L1cIiwgXCLQntC60YBcIiwgXCLQndC+0Y9cIiwgXCLQlNC10LpcIiBdLFxyXG5cdFx0c2hvd090aGVyTW9udGhzOiB0cnVlLFxyXG4gICAgc2VsZWN0T3RoZXJNb250aHM6IHRydWVcclxuXHR9ICk7XHJcblxyXG5cdCQoJy5jbGllbnRzLWxvZ29zJykub3dsQ2Fyb3VzZWwoe1xyXG4gICAgbG9vcDogZmFsc2UsXHJcbiAgICBtYXJnaW46IDIwLFxyXG4gICAgbmF2OiBmYWxzZSxcclxuXHRcdGRvdHM6IGZhbHNlLFxyXG4gICAgcmVzcG9uc2l2ZToge1xyXG5cdFx0XHQwOiB7XHJcblx0XHRcdFx0aXRlbXM6IDFcclxuXHRcdFx0fSxcclxuXHRcdFx0NDgwOiB7XHJcblx0XHRcdFx0aXRlbXM6IDJcclxuXHRcdFx0fSxcclxuXHRcdFx0NzcwOiB7XHJcblx0XHRcdFx0aXRlbXM6IDNcclxuXHRcdFx0fSxcclxuXHRcdFx0MTIwMDoge1xyXG5cdFx0XHRcdGl0ZW1zOiA0XHJcblx0XHRcdH1cclxuICAgIH1cclxuXHR9KTtcclxuXHJcblx0JCgnLnJldmlld3Mtc2xpZGVyJykub3dsQ2Fyb3VzZWwoe1xyXG4gICAgbG9vcDogZmFsc2UsXHJcbiAgICBtYXJnaW46IDI1LFxyXG4gICAgbmF2OiBmYWxzZSxcclxuXHRcdGRvdHM6IHRydWUsXHJcbiAgICByZXNwb25zaXZlOiB7XHJcblx0XHRcdDA6IHtcclxuXHRcdFx0XHRpdGVtczogMVxyXG5cdFx0XHR9LFxyXG5cdFx0XHQ3NzA6IHtcclxuXHRcdFx0XHRpdGVtczogMlxyXG5cdFx0XHR9XHJcbiAgICB9XHJcblx0fSk7XHJcblxyXG5cdCQoJy5pbnB1dC1waG9uZScpLm1hc2soXCIrNyAoOTk5KSA5OTkgOTk5OVwiKVxyXG5cclxufSk7Il0sImZpbGUiOiIuL3Jlc291cmNlcy9qcy9zY3JpcHQuanMuanMiLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///./resources/js/script.js\n");

/***/ })

/******/ 	});
/************************************************************************/
/******/ 	
/******/ 	// startup
/******/ 	// Load entry module and return exports
/******/ 	// This entry module can't be inlined because the eval-source-map devtool is used.
/******/ 	var __webpack_exports__ = {};
/******/ 	__webpack_modules__["./resources/js/script.js"]();
/******/ 	
/******/ })()
;