/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
/******/ (() => { // webpackBootstrap
/******/ 	var __webpack_modules__ = ({

/***/ "./resources/js/script.js":
/*!********************************!*\
  !*** ./resources/js/script.js ***!
  \********************************/
/***/ (() => {

eval("function _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest(); }\n\nfunction _nonIterableRest() { throw new TypeError(\"Invalid attempt to destructure non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); }\n\nfunction _iterableToArrayLimit(arr, i) { var _i = arr == null ? null : typeof Symbol !== \"undefined\" && arr[Symbol.iterator] || arr[\"@@iterator\"]; if (_i == null) return; var _arr = []; var _n = true; var _d = false; var _s, _e; try { for (_i = _i.call(arr); !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i[\"return\"] != null) _i[\"return\"](); } finally { if (_d) throw _e; } } return _arr; }\n\nfunction _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }\n\nfunction _createForOfIteratorHelper(o, allowArrayLike) { var it = typeof Symbol !== \"undefined\" && o[Symbol.iterator] || o[\"@@iterator\"]; if (!it) { if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === \"number\") { if (it) o = it; var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e2) { throw _e2; }, f: F }; } throw new TypeError(\"Invalid attempt to iterate non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); } var normalCompletion = true, didErr = false, err; return { s: function s() { it = it.call(o); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e3) { didErr = true; err = _e3; }, f: function f() { try { if (!normalCompletion && it[\"return\"] != null) it[\"return\"](); } finally { if (didErr) throw err; } } }; }\n\nfunction _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === \"string\") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === \"Object\" && o.constructor) n = o.constructor.name; if (n === \"Map\" || n === \"Set\") return Array.from(o); if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }\n\nfunction _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }\n\ndocument.addEventListener('DOMContentLoaded', function () {\n  cutMenuOnClick();\n\n  function cutMenuOnClick() {\n    var hamburger = document.getElementsByClassName('header__hamburger')[0];\n    var menu = document.getElementById('header-drop');\n    document.addEventListener('click', function (evt) {\n      if (!menu.classList.contains('active')) return;\n      var menuBottom = menu.getBoundingClientRect().bottom;\n\n      if (evt.clientY > menuBottom) {\n        menu.style.height = 0;\n        menu.classList.remove('active');\n        hamburger.classList.remove('active');\n      }\n    });\n  }\n\n  expandElements();\n\n  function expandElements() {\n    var togglers = document.getElementsByClassName('expand-toggler');\n\n    var _iterator = _createForOfIteratorHelper(togglers),\n        _step;\n\n    try {\n      for (_iterator.s(); !(_step = _iterator.n()).done;) {\n        var toggler = _step.value;\n        toggler.addEventListener('click', toggle);\n      }\n    } catch (err) {\n      _iterator.e(err);\n    } finally {\n      _iterator.f();\n    }\n\n    function toggle(evt) {\n      var target = document.getElementById(this.dataset.expand);\n      if (!target) return;\n\n      if (this.classList.contains('active')) {\n        this.classList.remove('active');\n\n        if (target.classList.contains('active')) {\n          target.classList.remove('active');\n          cut(target);\n        }\n      } else {\n        this.classList.add('active');\n\n        if (!target.classList.contains('active')) {\n          target.classList.add('active');\n          expand(target);\n        }\n      }\n    }\n\n    function cut(target) {\n      target.style.height = 0;\n    }\n\n    function expand(target) {\n      var height = target.scrollHeight;\n      target.style.height = height + 'px';\n    }\n  }\n\n  prettySlider();\n\n  function prettySlider() {\n    var sliders = document.getElementsByClassName('pretty-slider');\n\n    var _iterator2 = _createForOfIteratorHelper(sliders),\n        _step2;\n\n    try {\n      for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {\n        var slider = _step2.value;\n        init(slider);\n      }\n    } catch (err) {\n      _iterator2.e(err);\n    } finally {\n      _iterator2.f();\n    }\n\n    function init(slider) {\n      var togglers = slider.querySelectorAll('.pretty-slider__navigation .-arrow');\n      var conveyor = slider.getElementsByClassName('pretty-slider__visible-slides-wrapper')[0];\n      var slides = slider.querySelectorAll('.pretty-slider__hidden-slides .pretty-slider__slide');\n      var dotsWrapper = slider.getElementsByClassName('pretty-slider__dots')[0];\n      var dots = dotsWrapper.getElementsByClassName('-dot');\n      var visibleSlides = conveyor.getElementsByClassName('pretty-slider__slide');\n      var sliderEngine = slider.getElementsByClassName('pretty-slider__wrapper')[0];\n      if (!conveyor) return;\n      var changeAllow = true;\n      var currentIndex = 0;\n\n      var _loop = function _loop(i) {\n        togglers[i].addEventListener('click', function () {\n          if (!changeAllow) return;\n          if (i == 0) slideBack();\n          if (i == 1) slideNext();\n        });\n      };\n\n      for (var i = 0; i < togglers.length; i++) {\n        _loop(i);\n      }\n\n      var sliderTimer = setTimeout(autoslide, 3000);\n\n      function autoslide() {\n        slideNext();\n        sliderTimer = setTimeout(autoslide, 3000);\n      }\n\n      if (sliderEngine) {\n        sliderEngine.addEventListener('mouseenter', function () {\n          clearTimeout(sliderTimer);\n        });\n        sliderEngine.addEventListener('mouseleave', function () {\n          sliderTimer = setTimeout(autoslide, 3000);\n        });\n      }\n\n      loadStart();\n\n      function loadStart() {\n        for (var _i = -1; _i < 2; _i++) {\n          var slide = slides[filterIndex(_i)].cloneNode(true);\n          conveyor.insertAdjacentElement('beforeend', slide);\n        }\n      }\n\n      createDots();\n\n      function createDots() {\n        if (!dotsWrapper) return;\n\n        for (var _i2 = 0; _i2 < slides.length; _i2++) {\n          var dot = document.createElement('div');\n          dot.classList.add('-dot');\n          dotsWrapper.append(dot);\n        }\n      }\n\n      changeDot();\n\n      function changeDot() {\n        var _iterator3 = _createForOfIteratorHelper(dots),\n            _step3;\n\n        try {\n          for (_iterator3.s(); !(_step3 = _iterator3.n()).done;) {\n            var dot = _step3.value;\n            dot.classList.remove('active');\n          }\n        } catch (err) {\n          _iterator3.e(err);\n        } finally {\n          _iterator3.f();\n        }\n\n        var targetDot = dots[currentIndex];\n        if (targetDot) targetDot.classList.add('active');\n      }\n\n      function filterIndex(i) {\n        if (i < 0) return slides.length - 1;\n        if (i >= slides.length) return 0;\n        return i;\n      }\n\n      function slideBack() {\n        // Включаем анимацию и перелистываем\n        currentIndex = filterIndex(currentIndex - 1);\n        changeAllow = false;\n        conveyor.classList.remove('--no-animate');\n        conveyor.style.left = '0';\n        changeDot();\n        conveyor.addEventListener('transitionend', function changeSlide() {\n          // Выключаем анимацию\n          conveyor.classList.add('--no-animate'); // Удаляем ненужный слайд\n\n          visibleSlides[visibleSlides.length - 1].remove(); // Копируем и вставляем дополнительный слайд\n\n          var slide = slides[filterIndex(currentIndex - 1)].cloneNode(true);\n          conveyor.insertAdjacentElement('afterbegin', slide);\n          conveyor.style.left = '-100%';\n          changeAllow = true;\n          conveyor.removeEventListener('transitionend', changeSlide);\n        });\n      }\n\n      function slideNext() {\n        // Включаем анимацию и перелистываем\n        currentIndex = filterIndex(currentIndex + 1);\n        changeAllow = false;\n        conveyor.classList.remove('--no-animate');\n        conveyor.style.left = '-200%';\n        changeDot();\n        conveyor.addEventListener('transitionend', function changeSlide() {\n          // Выключаем анимацию\n          conveyor.classList.add('--no-animate'); // Удаляем ненужный слайд\n\n          visibleSlides[0].remove(); // Копируем и вставляем дополнительный слайд\n\n          var slide = slides[filterIndex(currentIndex + 1)].cloneNode(true);\n          conveyor.insertAdjacentElement('beforeend', slide);\n          conveyor.style.left = '-100%';\n          changeAllow = true;\n          conveyor.removeEventListener('transitionend', changeSlide);\n        });\n      }\n    }\n  }\n\n  toggleActive();\n\n  function toggleActive() {\n    var togglers = document.getElementsByClassName('toggle-active');\n\n    var _iterator4 = _createForOfIteratorHelper(togglers),\n        _step4;\n\n    try {\n      for (_iterator4.s(); !(_step4 = _iterator4.n()).done;) {\n        var toggler = _step4.value;\n        toggler.addEventListener('click', toggle);\n      }\n    } catch (err) {\n      _iterator4.e(err);\n    } finally {\n      _iterator4.f();\n    }\n\n    function toggle() {\n      var id = this.dataset.toggleActive;\n      var element = document.getElementById(id);\n\n      if (element) {\n        element.classList.toggle('active');\n        this.classList.toggle('active');\n      } else {\n        console.error(\"Element by id \\\"\".concat(id, \"\\\" not found!\"));\n      }\n    }\n  }\n\n  tabs();\n\n  function tabs() {\n    var tabs = document.getElementsByClassName('tabs-system');\n\n    var _iterator5 = _createForOfIteratorHelper(tabs),\n        _step5;\n\n    try {\n      for (_iterator5.s(); !(_step5 = _iterator5.n()).done;) {\n        var tab = _step5.value;\n        init(tab);\n      }\n    } catch (err) {\n      _iterator5.e(err);\n    } finally {\n      _iterator5.f();\n    }\n\n    function init(tab) {\n      var triggers = tab.getElementsByClassName('tabs-system__trigger');\n      var tabs = tab.getElementsByClassName('tabs-system__tab');\n\n      var _loop2 = function _loop2(i) {\n        triggers[i].addEventListener('click', function () {\n          if (tabs[i]) {\n            deactivate();\n            tabs[i].classList.add('active');\n            triggers[i].classList.add('active');\n          }\n        });\n      };\n\n      for (var i = 0; i < triggers.length; i++) {\n        _loop2(i);\n      }\n\n      function deactivate() {\n        var _iterator6 = _createForOfIteratorHelper(tabs),\n            _step6;\n\n        try {\n          for (_iterator6.s(); !(_step6 = _iterator6.n()).done;) {\n            var _tab = _step6.value;\n\n            _tab.classList.remove('active');\n          }\n        } catch (err) {\n          _iterator6.e(err);\n        } finally {\n          _iterator6.f();\n        }\n\n        var _iterator7 = _createForOfIteratorHelper(triggers),\n            _step7;\n\n        try {\n          for (_iterator7.s(); !(_step7 = _iterator7.n()).done;) {\n            var trigger = _step7.value;\n            trigger.classList.remove('active');\n          }\n        } catch (err) {\n          _iterator7.e(err);\n        } finally {\n          _iterator7.f();\n        }\n      }\n    }\n  }\n\n  modals();\n\n  function modals() {\n    var modals = document.getElementsByClassName('modal');\n    var header = document.getElementById('header');\n    var openers = document.getElementsByClassName('open-modal');\n    var closers = document.getElementsByClassName('close-modal');\n    Object.values(openers).forEach(function (opener) {\n      opener.addEventListener('click', function () {\n        openWind(opener.dataset.openModal);\n      });\n    });\n    Object.values(closers).forEach(function (closer) {\n      closer.addEventListener('click', function () {\n        closeWind();\n      });\n    });\n\n    function openWind(id) {\n      var modal = document.getElementById(id);\n\n      if (!modal) {\n        console.warn('Модального окна с id \"' + id + '\" не существует');\n        return;\n      }\n\n      document.body.style.paddingRight = window.innerWidth - document.documentElement.clientWidth + 'px';\n      header.style.paddingRight = window.innerWidth - document.documentElement.clientWidth + 'px';\n      document.body.classList.add('--fixed');\n      var modalBody = modal.getElementsByClassName('modal__body')[0];\n      modal.classList.add('active');\n      modal.classList.add('--transparent');\n      modalBody.classList.add('active');\n      modalBody.classList.add('--transparent');\n      setTimeout(function () {\n        modal.classList.remove('--transparent');\n        modalBody.classList.remove('--transparent');\n      });\n    }\n\n    function closeWind() {\n      Object.values(modals).forEach(function (modal) {\n        var modalBody = modal.getElementsByClassName('modal__body')[0];\n        modal.classList.add('--transparent');\n        modalBody.classList.add('--transparent');\n        setTimeout(function () {\n          modal.classList.remove('active');\n          modal.classList.remove('--transparent');\n          modalBody.classList.remove('active');\n          modalBody.classList.remove('--transparent');\n        }, 300);\n      });\n      setTimeout(function () {\n        document.body.style.paddingRight = 0;\n        header.style.paddingRight = 0;\n        document.body.classList.remove('--fixed');\n      }, 300);\n    }\n  }\n\n  formDroplists();\n\n  function formDroplists() {\n    var droplists = document.getElementsByClassName('input-droplist');\n\n    var _iterator8 = _createForOfIteratorHelper(droplists),\n        _step8;\n\n    try {\n      for (_iterator8.s(); !(_step8 = _iterator8.n()).done;) {\n        var droplist = _step8.value;\n        init(droplist);\n      }\n    } catch (err) {\n      _iterator8.e(err);\n    } finally {\n      _iterator8.f();\n    }\n\n    function init(droplist) {\n      var input = droplist.getElementsByClassName('-input')[0];\n      var list = droplist.getElementsByClassName('-list')[0];\n      var listItems = droplist.getElementsByTagName('li');\n      if (!input || !list) return;\n      input.addEventListener('focus', function (evt) {\n        list.classList.add('active');\n      });\n      input.addEventListener('blur', function (evt) {\n        setTimeout(function () {\n          list.classList.remove('active');\n        }, 100);\n      });\n\n      var _iterator9 = _createForOfIteratorHelper(listItems),\n          _step9;\n\n      try {\n        for (_iterator9.s(); !(_step9 = _iterator9.n()).done;) {\n          var li = _step9.value;\n          li.addEventListener('mousedown', set);\n        }\n      } catch (err) {\n        _iterator9.e(err);\n      } finally {\n        _iterator9.f();\n      }\n\n      function set(evt) {\n        if (input.tagName == 'INPUT') input.value = this.dataset.value;\n\n        if (input.tagName == 'DIV') {\n          input.innerHTML = this.innerHTML;\n          input.dataset.value = this.dataset.value;\n        }\n      }\n    }\n  }\n\n  nextsForm();\n\n  function nextsForm() {\n    var forms = document.getElementsByClassName('nexts-form');\n    Object.values(forms).forEach(init);\n\n    function init(form) {\n      var input = form.getElementsByClassName('nexts-form__input')[0];\n\n      if (!input) {\n        console.warn('Не обнаружен \"input.nexts-form__input\"!');\n        return;\n      }\n\n      var nextsWrapper = form.getElementsByClassName('nexts-form__cells')[0];\n      var nexts = nextsWrapper.getElementsByTagName('input');\n      Object.values(nexts).forEach(function (input, i) {\n        input.value = '';\n        input.addEventListener('input', function (evt) {\n          input.value = input.value.replace(/[^\\d]/g, '');\n\n          if (input.value.length > 0) {\n            if (i < nexts.length - 1) {\n              nexts[i + 1].focus();\n              input.value = input.value[input.value.length - 1];\n            } else {\n              input.value = input.value[input.value.length - 1];\n              finish();\n            }\n          }\n        });\n      });\n\n      function finish() {\n        input.value = '';\n        Object.values(nexts).forEach(function (next) {\n          input.value += next.value;\n        }); // if (input.value.length === 4) {\n        // \tsetTimeout( () => {\n        // \t\tnextsWrapper.classList.add('--done')\n        // \t}, 200)\n        // \t// form.submit()\n        // } else {\n        // \tnextsWrapper.classList.add('--error')\n        // \tinput.classList.add('--error')\n        // }\n      }\n    }\n  }\n\n  stepTabs();\n\n  function stepTabs() {\n    var stepForms = document.getElementsByClassName('step-tabs');\n    Object.values(stepForms).forEach(init);\n\n    function init(form) {\n      var htmlForm = form.getElementsByTagName('form')[0];\n      var layoutLine = form.getElementsByClassName('step-tabs-line')[0];\n      var layoutNum = form.getElementsByClassName('step-tabs-num')[0];\n      var nextButtons = form.getElementsByClassName('step-tabs-next');\n      var backButtons = form.getElementsByClassName('step-tabs-back');\n      var triggers = form.getElementsByClassName('step-tabs-trigger');\n      var checkEntries = form.getElementsByClassName('step-tabs-check-entry');\n      var tabs = form.getElementsByClassName('step-tabs-tab');\n      var currentNum = 0;\n      setTab(0);\n      Object.values(triggers).forEach(function (trigger) {\n        trigger.addEventListener('click', function () {\n          setTab(+trigger.dataset.num);\n        });\n      });\n      Object.values(nextButtons).forEach(function (btn) {\n        btn.addEventListener('click', setNextTab);\n      });\n      Object.values(backButtons).forEach(function (btn) {\n        btn.addEventListener('click', setPrevTab);\n      });\n\n      function setNextTab() {\n        if (!validateTab()) return;\n        addToCheckout();\n        setTab(++currentNum);\n      }\n\n      function setPrevTab() {\n        setTab(--currentNum);\n      }\n\n      function setTab(num) {\n        num = normalizeNum(num);\n        currentNum = num;\n        setLayout(num);\n        deactivateAllTabs();\n        activateTab(num);\n\n        if (num === tabs.length - 1) {\n          form.classList.add('--finish');\n        } else {\n          form.classList.remove('--finish');\n        }\n      }\n\n      function validateTab() {\n        var tab = tabs[currentNum];\n        var inputs = tab.getElementsByTagName('input');\n        var isValid = true;\n\n        var _iterator10 = _createForOfIteratorHelper(inputs),\n            _step10;\n\n        try {\n          for (_iterator10.s(); !(_step10 = _iterator10.n()).done;) {\n            var input = _step10.value;\n\n            if (input.required && input.value === '') {\n              input.classList.add('--error');\n              isValid = false;\n            }\n          }\n        } catch (err) {\n          _iterator10.e(err);\n        } finally {\n          _iterator10.f();\n        }\n\n        return isValid;\n      }\n\n      function setLayout(num) {\n        layoutNum.innerText = \"\\u0428\\u0430\\u0433 \".concat(num + 1, \" \\u0438\\u0437 \").concat(tabs.length);\n        layoutLine.style.width = 100 / (tabs.length / (num + 1)) + '%';\n      }\n\n      function deactivateAllTabs() {\n        Object.values(tabs).forEach(function (tab) {\n          tab.classList.remove('active');\n        });\n      }\n\n      function activateTab(num) {\n        tabs[num].classList.add('active');\n      }\n\n      function addToCheckout() {\n        var formData = new FormData(htmlForm);\n\n        var _iterator11 = _createForOfIteratorHelper(formData.entries()),\n            _step11;\n\n        try {\n          var _loop3 = function _loop3() {\n            var _step11$value = _slicedToArray(_step11.value, 2),\n                name = _step11$value[0],\n                value = _step11$value[1];\n\n            if (!value) return \"continue\";\n            var targetEntry = Object.values(checkEntries).filter(function (entry) {\n              return name === entry.dataset.name;\n            })[0];\n\n            if (targetEntry) {\n              targetEntry.innerText = value;\n            }\n          };\n\n          for (_iterator11.s(); !(_step11 = _iterator11.n()).done;) {\n            var _ret = _loop3();\n\n            if (_ret === \"continue\") continue;\n          }\n        } catch (err) {\n          _iterator11.e(err);\n        } finally {\n          _iterator11.f();\n        }\n      }\n\n      function normalizeNum(num) {\n        if (num < 0) return 0;\n        if (num >= tabs.length) return tabs.length - 1;\n        return num;\n      }\n    }\n  }\n\n  $(\"#datepicker\").datepicker({\n    firstDay: 1,\n    dateFormat: \"dd.mm.yy\",\n    dayNames: [\"Воскресенье\", \"Понедельник\", \"Вторник\", \"Среда\", \"Четверг\", \"Пятница\", \"Суббота\"],\n    dayNamesShort: [\"Вск\", \"Пнд\", \"Втр\", \"Срд\", \"Чтв\", \"Птн\", \"Сбт\"],\n    dayNamesMin: [\"Вс\", \"Пн\", \"Вт\", \"Ср\", \"Чт\", \"Пт\", \"Сб\"],\n    monthNames: [\"Январь\", \"Февраль\", \"Март\", \"Апрель\", \"Май\", \"Июнь\", \"Июль\", \"Август\", \"Сентябрь\", \"Окрябрь\", \"Ноябрь\", \"Декабрь\"],\n    monthNamesShort: [\"Янв\", \"Фев\", \"Мар\", \"Апр\", \"Май\", \"Июн\", \"Июл\", \"Авг\", \"Сен\", \"Окр\", \"Ноя\", \"Дек\"],\n    showOtherMonths: true,\n    selectOtherMonths: true\n  });\n  $('.clients-logos').owlCarousel({\n    loop: false,\n    margin: 20,\n    nav: false,\n    dots: false,\n    responsive: {\n      0: {\n        items: 1\n      },\n      480: {\n        items: 2\n      },\n      770: {\n        items: 3\n      },\n      1200: {\n        items: 4\n      }\n    }\n  });\n  $('.reviews-slider').owlCarousel({\n    loop: false,\n    margin: 25,\n    nav: false,\n    dots: true,\n    responsive: {\n      0: {\n        items: 1\n      },\n      770: {\n        items: 2\n      }\n    }\n  });\n  $('.input-phone').mask(\"+7 (999) 999 9999\");\n});//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./resources/js/script.js\n");

/***/ })

/******/ 	});
/************************************************************************/
/******/ 	
/******/ 	// startup
/******/ 	// Load entry module and return exports
/******/ 	// This entry module can't be inlined because the eval-source-map devtool is used.
/******/ 	var __webpack_exports__ = {};
/******/ 	__webpack_modules__["./resources/js/script.js"]();
/******/ 	
/******/ })()
;