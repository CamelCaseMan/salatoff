/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
/******/ (() => { // webpackBootstrap
/******/ 	var __webpack_modules__ = ({

/***/ "./resources/js/script.js":
/*!********************************!*\
  !*** ./resources/js/script.js ***!
  \********************************/
/***/ (() => {

eval("function _createForOfIteratorHelper(o, allowArrayLike) { var it = typeof Symbol !== \"undefined\" && o[Symbol.iterator] || o[\"@@iterator\"]; if (!it) { if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === \"number\") { if (it) o = it; var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e) { throw _e; }, f: F }; } throw new TypeError(\"Invalid attempt to iterate non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); } var normalCompletion = true, didErr = false, err; return { s: function s() { it = it.call(o); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e2) { didErr = true; err = _e2; }, f: function f() { try { if (!normalCompletion && it[\"return\"] != null) it[\"return\"](); } finally { if (didErr) throw err; } } }; }\n\nfunction _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === \"string\") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === \"Object\" && o.constructor) n = o.constructor.name; if (n === \"Map\" || n === \"Set\") return Array.from(o); if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }\n\nfunction _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }\n\ndocument.addEventListener('DOMContentLoaded', function () {\n  // hi\n  expandElements();\n\n  function expandElements() {\n    var togglers = document.getElementsByClassName('expand-toggler');\n\n    var _iterator = _createForOfIteratorHelper(togglers),\n        _step;\n\n    try {\n      for (_iterator.s(); !(_step = _iterator.n()).done;) {\n        var toggler = _step.value;\n        toggler.addEventListener('click', toggle);\n      }\n    } catch (err) {\n      _iterator.e(err);\n    } finally {\n      _iterator.f();\n    }\n\n    function toggle(evt) {\n      var target = document.getElementById(this.dataset.expand);\n      if (!target) return;\n\n      if (this.classList.contains('active')) {\n        this.classList.remove('active');\n\n        if (target.classList.contains('active')) {\n          target.classList.remove('active');\n          cut(target);\n        }\n      } else {\n        this.classList.add('active');\n\n        if (!target.classList.contains('active')) {\n          target.classList.add('active');\n          expand(target);\n        }\n      }\n    }\n\n    function cut(target) {\n      target.style.height = 0;\n    }\n\n    function expand(target) {\n      var height = target.scrollHeight;\n      target.style.height = height + 'px';\n    }\n  }\n\n  prettySlider();\n\n  function prettySlider() {\n    var sliders = document.getElementsByClassName('pretty-slider');\n\n    var _iterator2 = _createForOfIteratorHelper(sliders),\n        _step2;\n\n    try {\n      for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {\n        var slider = _step2.value;\n        init(slider);\n      }\n    } catch (err) {\n      _iterator2.e(err);\n    } finally {\n      _iterator2.f();\n    }\n\n    function init(slider) {\n      var togglers = slider.querySelectorAll('.pretty-slider__navigation .-arrow');\n      var conveyor = slider.getElementsByClassName('pretty-slider__visible-slides-wrapper')[0];\n      var slides = slider.querySelectorAll('.pretty-slider__hidden-slides .pretty-slider__slide');\n      var dotsWrapper = slider.getElementsByClassName('pretty-slider__dots')[0];\n      var dots = dotsWrapper.getElementsByClassName('-dot');\n      var visibleSlides = conveyor.getElementsByClassName('pretty-slider__slide');\n      var sliderEngine = slider.getElementsByClassName('pretty-slider__wrapper')[0];\n      if (!conveyor) return;\n      var changeAllow = true;\n      var currentIndex = 0;\n\n      var _loop = function _loop(i) {\n        togglers[i].addEventListener('click', function () {\n          if (!changeAllow) return;\n          if (i == 0) slideBack();\n          if (i == 1) slideNext();\n        });\n      };\n\n      for (var i = 0; i < togglers.length; i++) {\n        _loop(i);\n      }\n\n      var sliderTimer = setTimeout(autoslide, 3000);\n\n      function autoslide() {\n        slideNext();\n        sliderTimer = setTimeout(autoslide, 3000);\n      }\n\n      if (sliderEngine) {\n        sliderEngine.addEventListener('mouseenter', function () {\n          clearTimeout(sliderTimer);\n        });\n        sliderEngine.addEventListener('mouseleave', function () {\n          sliderTimer = setTimeout(autoslide, 3000);\n        });\n      }\n\n      loadStart();\n\n      function loadStart() {\n        for (var _i = -1; _i < 2; _i++) {\n          var slide = slides[filterIndex(_i)].cloneNode(true);\n          conveyor.insertAdjacentElement('beforeend', slide);\n        }\n      }\n\n      createDots();\n\n      function createDots() {\n        if (!dotsWrapper) return;\n\n        for (var _i2 = 0; _i2 < slides.length; _i2++) {\n          var dot = document.createElement('div');\n          dot.classList.add('-dot');\n          dotsWrapper.append(dot);\n        }\n      }\n\n      changeDot();\n\n      function changeDot() {\n        var _iterator3 = _createForOfIteratorHelper(dots),\n            _step3;\n\n        try {\n          for (_iterator3.s(); !(_step3 = _iterator3.n()).done;) {\n            var dot = _step3.value;\n            dot.classList.remove('active');\n          }\n        } catch (err) {\n          _iterator3.e(err);\n        } finally {\n          _iterator3.f();\n        }\n\n        var targetDot = dots[currentIndex];\n        if (targetDot) targetDot.classList.add('active');\n      }\n\n      function filterIndex(i) {\n        if (i < 0) return slides.length - 1;\n        if (i >= slides.length) return 0;\n        return i;\n      }\n\n      function slideBack() {\n        // Включаем анимацию и перелистываем\n        currentIndex = filterIndex(currentIndex - 1);\n        changeAllow = false;\n        conveyor.classList.remove('--no-animate');\n        conveyor.style.left = '0';\n        changeDot();\n        conveyor.addEventListener('transitionend', function changeSlide() {\n          // Выключаем анимацию\n          conveyor.classList.add('--no-animate'); // Удаляем ненужный слайд\n\n          visibleSlides[visibleSlides.length - 1].remove(); // Копируем и вставляем дополнительный слайд\n\n          var slide = slides[filterIndex(currentIndex - 1)].cloneNode(true);\n          conveyor.insertAdjacentElement('afterbegin', slide);\n          conveyor.style.left = '-100%';\n          changeAllow = true;\n          conveyor.removeEventListener('transitionend', changeSlide);\n        });\n      }\n\n      function slideNext() {\n        // Включаем анимацию и перелистываем\n        currentIndex = filterIndex(currentIndex + 1);\n        changeAllow = false;\n        conveyor.classList.remove('--no-animate');\n        conveyor.style.left = '-200%';\n        changeDot();\n        conveyor.addEventListener('transitionend', function changeSlide() {\n          // Выключаем анимацию\n          conveyor.classList.add('--no-animate'); // Удаляем ненужный слайд\n\n          visibleSlides[0].remove(); // Копируем и вставляем дополнительный слайд\n\n          var slide = slides[filterIndex(currentIndex + 1)].cloneNode(true);\n          conveyor.insertAdjacentElement('beforeend', slide);\n          conveyor.style.left = '-100%';\n          changeAllow = true;\n          conveyor.removeEventListener('transitionend', changeSlide);\n        });\n      }\n    }\n  }\n\n  toggleActive();\n\n  function toggleActive() {\n    var togglers = document.getElementsByClassName('toggle-active');\n\n    var _iterator4 = _createForOfIteratorHelper(togglers),\n        _step4;\n\n    try {\n      for (_iterator4.s(); !(_step4 = _iterator4.n()).done;) {\n        var toggler = _step4.value;\n        toggler.addEventListener('click', toggle);\n      }\n    } catch (err) {\n      _iterator4.e(err);\n    } finally {\n      _iterator4.f();\n    }\n\n    function toggle() {\n      var id = this.dataset.toggleActive;\n      var element = document.getElementById(id);\n\n      if (element) {\n        element.classList.toggle('active');\n      } else {\n        console.error(\"Element by id \\\"\".concat(id, \"\\\" not found!\"));\n      }\n    }\n  }\n\n  tabs();\n\n  function tabs() {\n    var tabs = document.getElementsByClassName('tabs-system');\n\n    var _iterator5 = _createForOfIteratorHelper(tabs),\n        _step5;\n\n    try {\n      for (_iterator5.s(); !(_step5 = _iterator5.n()).done;) {\n        var tab = _step5.value;\n        init(tab);\n      }\n    } catch (err) {\n      _iterator5.e(err);\n    } finally {\n      _iterator5.f();\n    }\n\n    function init(tab) {\n      var triggers = tab.getElementsByClassName('tabs-system__trigger');\n      var tabs = tab.getElementsByClassName('tabs-system__tab');\n\n      var _loop2 = function _loop2(i) {\n        triggers[i].addEventListener('click', function () {\n          if (tabs[i]) {\n            deactivate();\n            tabs[i].classList.add('active');\n            triggers[i].classList.add('active');\n          }\n        });\n      };\n\n      for (var i = 0; i < triggers.length; i++) {\n        _loop2(i);\n      }\n\n      function deactivate() {\n        var _iterator6 = _createForOfIteratorHelper(tabs),\n            _step6;\n\n        try {\n          for (_iterator6.s(); !(_step6 = _iterator6.n()).done;) {\n            var _tab = _step6.value;\n\n            _tab.classList.remove('active');\n          }\n        } catch (err) {\n          _iterator6.e(err);\n        } finally {\n          _iterator6.f();\n        }\n\n        var _iterator7 = _createForOfIteratorHelper(triggers),\n            _step7;\n\n        try {\n          for (_iterator7.s(); !(_step7 = _iterator7.n()).done;) {\n            var trigger = _step7.value;\n            trigger.classList.remove('active');\n          }\n        } catch (err) {\n          _iterator7.e(err);\n        } finally {\n          _iterator7.f();\n        }\n      }\n    }\n  }\n\n  modals();\n\n  function modals() {\n    var triggers = document.getElementsByClassName('open-modals');\n    var windows = document.getElementsByClassName('modals__modal');\n    var closers = document.getElementsByClassName('modals__close');\n    var back = document.getElementsByClassName('modals__bg')[0];\n\n    if (back) {\n      back.addEventListener('click', closeModal);\n    }\n\n    var modals = document.getElementsByClassName('modals')[0];\n    if (!modals) return;\n\n    var _iterator8 = _createForOfIteratorHelper(triggers),\n        _step8;\n\n    try {\n      for (_iterator8.s(); !(_step8 = _iterator8.n()).done;) {\n        var trigger = _step8.value;\n        trigger.addEventListener('click', openModal);\n      }\n    } catch (err) {\n      _iterator8.e(err);\n    } finally {\n      _iterator8.f();\n    }\n\n    var _iterator9 = _createForOfIteratorHelper(closers),\n        _step9;\n\n    try {\n      for (_iterator9.s(); !(_step9 = _iterator9.n()).done;) {\n        var closer = _step9.value;\n        closer.addEventListener('click', closeModal);\n      }\n    } catch (err) {\n      _iterator9.e(err);\n    } finally {\n      _iterator9.f();\n    }\n\n    function closeAll() {\n      var _iterator10 = _createForOfIteratorHelper(windows),\n          _step10;\n\n      try {\n        for (_iterator10.s(); !(_step10 = _iterator10.n()).done;) {\n          var window = _step10.value;\n          window.classList.remove('active');\n        }\n      } catch (err) {\n        _iterator10.e(err);\n      } finally {\n        _iterator10.f();\n      }\n    }\n\n    function openModal() {\n      document.body.classList.add('--fixed');\n      modals.classList.add('active');\n    }\n\n    function closeModal() {\n      closeAll();\n      document.body.classList.remove('--fixed');\n      modals.classList.remove('active');\n    }\n  }\n\n  formDroplists();\n\n  function formDroplists() {\n    var droplists = document.getElementsByClassName('input-droplist');\n\n    var _iterator11 = _createForOfIteratorHelper(droplists),\n        _step11;\n\n    try {\n      for (_iterator11.s(); !(_step11 = _iterator11.n()).done;) {\n        var droplist = _step11.value;\n        init(droplist);\n      }\n    } catch (err) {\n      _iterator11.e(err);\n    } finally {\n      _iterator11.f();\n    }\n\n    function init(droplist) {\n      var input = droplist.getElementsByClassName('-input')[0];\n      var list = droplist.getElementsByClassName('-list')[0];\n      var listItems = droplist.getElementsByTagName('li');\n      if (!input || !list) return;\n      input.addEventListener('focus', function (evt) {\n        list.classList.add('active');\n      });\n      input.addEventListener('blur', function (evt) {\n        setTimeout(function () {\n          list.classList.remove('active');\n        }, 100);\n      });\n\n      var _iterator12 = _createForOfIteratorHelper(listItems),\n          _step12;\n\n      try {\n        for (_iterator12.s(); !(_step12 = _iterator12.n()).done;) {\n          var li = _step12.value;\n          li.addEventListener('mousedown', set);\n        }\n      } catch (err) {\n        _iterator12.e(err);\n      } finally {\n        _iterator12.f();\n      }\n\n      function set(evt) {\n        if (input.tagName == 'INPUT') input.value = this.dataset.value;\n\n        if (input.tagName == 'DIV') {\n          input.innerHTML = this.innerHTML;\n          input.dataset.value = this.dataset.value;\n        }\n      }\n    }\n  }\n\n  $(\"#datepicker\").datepicker({\n    firstDay: 1,\n    dateFormat: \"dd.mm.yy\",\n    dayNames: [\"Воскресенье\", \"Понедельник\", \"Вторник\", \"Среда\", \"Четверг\", \"Пятница\", \"Суббота\"],\n    dayNamesShort: [\"Вск\", \"Пнд\", \"Втр\", \"Срд\", \"Чтв\", \"Птн\", \"Сбт\"],\n    dayNamesMin: [\"Вс\", \"Пн\", \"Вт\", \"Ср\", \"Чт\", \"Пт\", \"Сб\"],\n    monthNames: [\"Январь\", \"Февраль\", \"Март\", \"Апрель\", \"Май\", \"Июнь\", \"Июль\", \"Август\", \"Сентябрь\", \"Окрябрь\", \"Ноябрь\", \"Декабрь\"],\n    monthNamesShort: [\"Янв\", \"Фев\", \"Мар\", \"Апр\", \"Май\", \"Июн\", \"Июл\", \"Авг\", \"Сен\", \"Окр\", \"Ноя\", \"Дек\"],\n    showOtherMonths: true,\n    selectOtherMonths: true\n  });\n  $('.clients-logos').owlCarousel({\n    loop: false,\n    margin: 20,\n    nav: false,\n    dots: false,\n    responsive: {\n      0: {\n        items: 1\n      },\n      480: {\n        items: 2\n      },\n      770: {\n        items: 3\n      },\n      1200: {\n        items: 4\n      }\n    }\n  });\n  $('.reviews-slider').owlCarousel({\n    loop: false,\n    margin: 25,\n    nav: false,\n    dots: true,\n    responsive: {\n      0: {\n        items: 1\n      },\n      770: {\n        items: 2\n      }\n    }\n  });\n});//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./resources/js/script.js\n");

/***/ })

/******/ 	});
/************************************************************************/
/******/ 	
/******/ 	// startup
/******/ 	// Load entry module and return exports
/******/ 	// This entry module can't be inlined because the eval-source-map devtool is used.
/******/ 	var __webpack_exports__ = {};
/******/ 	__webpack_modules__["./resources/js/script.js"]();
/******/ 	
/******/ })()
;