/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
/******/ (() => { // webpackBootstrap
/******/ 	var __webpack_modules__ = ({

/***/ "./resources/js/basket.js":
/*!********************************!*\
  !*** ./resources/js/basket.js ***!
  \********************************/
/***/ (() => {

eval("document.addEventListener('DOMContentLoaded', function () {\n  var CSRFToken = document.querySelector('meta[name=\"csrf-token\"]').content;\n  var headerQuty = document.getElementById('header-quty');\n  var quty = 1;\n  qutyInterface();\n\n  function qutyInterface() {\n    var interfaces = document.getElementsByClassName('quty-interface');\n    Object.values(interfaces).forEach(init);\n\n    function init(interfc) {\n      var quty = 1;\n      console.log(quty);\n      var valueField = interfc.getElementsByClassName('quty-interface-value')[0];\n      var buttons = interfc.getElementsByClassName('quty-interface-btn');\n      Object.values(buttons).forEach(function (button) {\n        button.addEventListener('click', changeQuty);\n      });\n\n      function changeQuty() {\n        var symbol = this.dataset.quty;\n\n        switch (symbol) {\n          case '+':\n            quty++;\n            break;\n\n          case '-':\n            quty--;\n            break;\n        }\n\n        if (quty <= 0) quty = 1;\n        valueField.innerText = quty + ' шт.';\n      }\n    }\n  }\n  /**\r\n   * Корзина\r\n   */\n\n\n  basketAddCount();\n\n  function basketAddCount() {\n    var addButton = document.getElementsByClassName('add-cart-button')[0];\n    var startQutyField = document.getElementsByClassName('quty-start')[0];\n    if (!addButton || !startQutyField) return;\n    quty = +startQutyField.dataset.value;\n    addButton.addEventListener('click', function () {\n      var productId = this.dataset.id;\n      console.log(quty, productId);\n      var formData = new FormData();\n      formData.append('productId', productId);\n      formData.append('count', quty);\n      fetch(\"/basket/addcount\", {\n        method: 'POST',\n        headers: {\n          'X-CSRF-TOKEN': CSRFToken\n        },\n        body: formData\n      }).then(function (response) {\n        return response.json();\n      }).then(function (data) {\n        console.log(data);\n        addButton.innerText = 'Изменить колличество';\n        headerQuty.innerText = data.count;\n      })[\"catch\"](function (err) {\n        console.log(err);\n      });\n    });\n  }\n\n  basketAdd();\n\n  function basketAdd() {\n    var addButtons = document.getElementsByClassName('add-one-button');\n    Object.values(addButtons).forEach(function (addButton) {\n      addButton.addEventListener('click', function addButtonEvent(evt) {\n        evt.preventDefault();\n        evt.stopPropagation();\n        var productId = this.dataset.id;\n        console.log(productId);\n        var formData = new FormData();\n        formData.append('productId', productId);\n        fetch(\"/basket/add\", {\n          method: 'POST',\n          headers: {\n            'X-CSRF-TOKEN': CSRFToken\n          },\n          body: formData\n        }).then(function (response) {\n          return response.json();\n        }).then(function (data) {\n          console.log(data);\n          addButton.classList.add('--done');\n          addButton.removeEventListener('click', addButtonEvent);\n          headerQuty.innerText = data.count;\n        })[\"catch\"](function (err) {\n          console.log(err);\n        });\n      });\n    });\n  }\n\n  basketRemove();\n\n  function basketRemove() {\n    var removeButtons = document.getElementsByClassName('remove-button');\n    Object.values(removeButtons).forEach(function (removeButton) {\n      removeButton.addEventListener('click', function () {\n        var productId = this.dataset.id;\n        console.log(productId);\n        var formData = new FormData();\n        formData.append('productId', productId);\n        fetch(\"/basket/removeAll\", {\n          method: 'POST',\n          headers: {\n            'X-CSRF-TOKEN': CSRFToken\n          },\n          body: formData\n        }).then(function (response) {\n          return response.json();\n        }).then(function (data) {\n          console.log(data);\n          headerQuty.innerText = data.count;\n          document.getElementById('basket-row-' + productId).remove();\n        })[\"catch\"](function (err) {\n          console.log(err);\n        });\n      });\n    });\n  }\n\n  basketAddInCart();\n\n  function basketAddInCart() {}\n});//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./resources/js/basket.js\n");

/***/ })

/******/ 	});
/************************************************************************/
/******/ 	
/******/ 	// startup
/******/ 	// Load entry module and return exports
/******/ 	// This entry module can't be inlined because the eval-source-map devtool is used.
/******/ 	var __webpack_exports__ = {};
/******/ 	__webpack_modules__["./resources/js/basket.js"]();
/******/ 	
/******/ })()
;